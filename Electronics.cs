using System;
using System.Data.SqlClient;
using System.Text;
using System.Windows.Forms; // Required for MessageBox
using System.Collections.Generic; // Not strictly used in this snippet but often useful

namespace Market
{
    // Example connection string (replace with your actual connection string)
    // string connectionString = "Data Source=localhost;Initial Catalog=MarketDB;Integrated Security=True;TrustServerCertificate=True";

    public abstract class Electronics
    {
        public string name { get; set; }
        public string brand { get; set; }
        public string model { get; set; }
        public string color { get; set; }
        public float price { get; set; }
        public int id { get; set; } // Will be set by DB on insert, read by GetData
        public string description { get; set; }
        public int quantity { get; set; }
        public byte[] image { get; set; }
        public string QRCode { get; set; }
        public int soldCounter { get; set; }


        // Constructor for new items (ID will be generated by DB)
        protected Electronics(string name, string brand, string model, string color, float price, string description, int quantity, byte[] image, string qrCode, int soldCounter = 0)
        {
            this.name = name;
            this.brand = brand;
            this.model = model;
            this.color = color;
            this.price = price;
            this.description = description;
            this.quantity = quantity;
            this.image = image;
            this.QRCode = qrCode;
            this.soldCounter = soldCounter;
        }

        // Constructor for items fetched from DB (ID is known)
        protected Electronics(string name, string brand, string model, string color, float price, int id, string description, int quantity, byte[] image, string qrCode, int soldCounter = 0)
        {
            this.name = name;
            this.brand = brand;
            this.model = model;
            this.color = color;
            this.id = id;
            this.price = price;
            this.description = description;
            this.quantity = quantity;
            this.image = image;
            this.QRCode = qrCode;
            this.soldCounter = soldCounter;
        }

        public abstract void SaveToDb(string connectionString);
        public abstract void SaveToDbWithoutImage(string connectionString);
        public abstract void GetData(string in_name, string connectionString);
        public abstract override string ToString();
    }

    public class Phone : Electronics
    {
        public string operatingSystem { get; set; }
        public float screenSize { get; set; }
        public int storageCapacity { get; set; }
        public int ramSize { get; set; }
        public int cameraQuality { get; set; }
        public string cpuType { get; set; }
        public int batteryCapacity { get; set; }
        public bool tablet { get; set; }

        // Constructor for new Phone
        public Phone(
            string name, string brand, string model, string color, float price,
            string description, int quantity, byte[] image, string qrCode,
            string operatingSystem, float screenSize, int storageCapacity, int ramSize,
            int cameraQuality, string cpuType, int batteryCapacity, bool tablet, int soldCounter = 0)
            : base(name, brand, model, color, price, description, quantity, image, qrCode, soldCounter)
        {
            this.operatingSystem = operatingSystem;
            this.screenSize = screenSize;
            this.storageCapacity = storageCapacity;
            this.ramSize = ramSize;
            this.cameraQuality = cameraQuality;
            this.cpuType = cpuType;
            this.batteryCapacity = batteryCapacity;
            this.tablet = tablet;
        }

        // Constructor for existing Phone (from DB)
        public Phone(
            string name, string brand, string model, string color, float price, int id,
            string description, int quantity, byte[] image, string qrCode,
            string operatingSystem, float screenSize, int storageCapacity, int ramSize,
            int cameraQuality, string cpuType, int batteryCapacity, bool tablet, int soldCounter = 0)
            : base(name, brand, model, color, price, id, description, quantity, image, qrCode, soldCounter)
        {
            this.operatingSystem = operatingSystem;
            this.screenSize = screenSize;
            this.storageCapacity = storageCapacity;
            this.ramSize = ramSize;
            this.cameraQuality = cameraQuality;
            this.cpuType = cpuType;
            this.batteryCapacity = batteryCapacity;
            this.tablet = tablet;
        }

        // Parameterless constructor
        public Phone() : base(null, null, null, null, 0, 0, null, 0, null, null) { } // ID set to 0 for base

        public override void SaveToDb(string connectionString)
        {
            string mergeQuery = @"
            MERGE INTO Phones AS Target
            USING (SELECT @name AS name) AS Source
            ON Target.name = Source.name
            WHEN MATCHED THEN
                UPDATE SET
                    brand = @brand, model = @model, color = @color, price = @price,
                    description = @description, quantity = @quantity, image = @image, QRCode = @QRCode,
                    soldCounter = @soldCounter, operatingSystem = @operatingSystem, screenSize = @screenSize,
                    storageCapacity = @storageCapacity, ramSize = @ramSize, cameraQuality = @cameraQuality,
                    cpuType = @cpuType, batteryCapacity = @batteryCapacity, tablet = @tablet
            WHEN NOT MATCHED THEN
                INSERT (name, brand, model, color, price, description, quantity, image, QRCode, operatingSystem, screenSize, storageCapacity, ramSize, cameraQuality, cpuType, batteryCapacity, tablet, soldCounter)
                VALUES (@name, @brand, @model, @color, @price, @description, @quantity, @image, @QRCode, @operatingSystem, @screenSize, @storageCapacity, @ramSize, @cameraQuality, @cpuType, @batteryCapacity, @tablet, @soldCounter);";

            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(mergeQuery, conn))
            {
                cmd.Parameters.AddWithValue("@name", (object)name ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@brand", (object)brand ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@model", (object)model ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@color", (object)color ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@price", price);
                cmd.Parameters.AddWithValue("@description", (object)description ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@quantity", quantity);
                cmd.Parameters.AddWithValue("@image", (object)image ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@QRCode", (object)QRCode ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@soldCounter", soldCounter);
                cmd.Parameters.AddWithValue("@operatingSystem", (object)operatingSystem ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@screenSize", screenSize);
                cmd.Parameters.AddWithValue("@storageCapacity", storageCapacity);
                cmd.Parameters.AddWithValue("@ramSize", ramSize);
                cmd.Parameters.AddWithValue("@cameraQuality", cameraQuality);
                cmd.Parameters.AddWithValue("@cpuType", (object)cpuType ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@batteryCapacity", batteryCapacity);
                cmd.Parameters.AddWithValue("@tablet", tablet);

                try
                {
                    conn.Open();
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Database Error (Phone.SaveToDb): {ex.Message} \nQuery: {cmd.CommandText}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }
        public override void SaveToDbWithoutImage(string connectionString)
        {
            string mergeQuery = @"
            MERGE INTO Phones AS Target
            USING (SELECT @name AS name) AS Source
            ON Target.name = Source.name
            WHEN MATCHED THEN
                UPDATE SET
                    brand = @brand, model = @model, color = @color, price = @price,
                    description = @description, quantity = @quantity, QRCode = @QRCode,
                    soldCounter = @soldCounter, operatingSystem = @operatingSystem, screenSize = @screenSize,
                    storageCapacity = @storageCapacity, ramSize = @ramSize, cameraQuality = @cameraQuality,
                    cpuType = @cpuType, batteryCapacity = @batteryCapacity, tablet = @tablet
            WHEN NOT MATCHED THEN
                INSERT (name, brand, model, color, price, description, quantity, QRCode, operatingSystem, screenSize, storageCapacity, ramSize, cameraQuality, cpuType, batteryCapacity, tablet, soldCounter)
                VALUES (@name, @brand, @model, @color, @price, @description, @quantity, @QRCode, @operatingSystem, @screenSize, @storageCapacity, @ramSize, @cameraQuality, @cpuType, @batteryCapacity, @tablet, @soldCounter);";

            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(mergeQuery, conn))
            {
                cmd.Parameters.AddWithValue("@name", (object)name ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@brand", (object)brand ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@model", (object)model ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@color", (object)color ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@price", price);
                cmd.Parameters.AddWithValue("@description", (object)description ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@quantity", quantity);
                cmd.Parameters.AddWithValue("@QRCode", (object)QRCode ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@soldCounter", soldCounter);
                cmd.Parameters.AddWithValue("@operatingSystem", (object)operatingSystem ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@screenSize", screenSize);
                cmd.Parameters.AddWithValue("@storageCapacity", storageCapacity);
                cmd.Parameters.AddWithValue("@ramSize", ramSize);
                cmd.Parameters.AddWithValue("@cameraQuality", cameraQuality);
                cmd.Parameters.AddWithValue("@cpuType", (object)cpuType ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@batteryCapacity", batteryCapacity);
                cmd.Parameters.AddWithValue("@tablet", tablet);

                try
                {
                    conn.Open();
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Database Error (Phone.SaveToDbWithoutImage): {ex.Message} \nQuery: {cmd.CommandText}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        public override void GetData(string in_name, string connectionString)
        {
            string selectQuery = "SELECT * FROM Phones WHERE name = @name";

            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(selectQuery, conn))
            {
                cmd.Parameters.AddWithValue("@name", in_name); // Name is key for retrieval
                try
                {
                    conn.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            this.id = Convert.ToInt32(reader["id"]); // Read the auto-generated ID
                            this.name = reader["name"].ToString(); // Already known, but good to read all
                            this.brand = reader["brand"].ToString();
                            this.model = reader["model"].ToString();
                            this.color = reader["color"].ToString();
                            this.price = Convert.ToSingle(reader["price"]);
                            this.description = reader["description"] != DBNull.Value ? reader["description"].ToString() : null;
                            this.quantity = Convert.ToInt32(reader["quantity"]);
                            this.image = reader["image"] != DBNull.Value ? (byte[])reader["image"] : null;
                            this.QRCode = reader["QRCode"].ToString();
                            this.soldCounter = reader["soldCounter"] != DBNull.Value ? Convert.ToInt32(reader["soldCounter"]) : 0;
                            this.operatingSystem = reader["operatingSystem"] != DBNull.Value ? reader["operatingSystem"].ToString() : null;
                            this.screenSize = Convert.ToSingle(reader["screenSize"]);
                            this.storageCapacity = Convert.ToInt32(reader["storageCapacity"]);
                            this.ramSize = Convert.ToInt32(reader["ramSize"]);
                            this.cameraQuality = Convert.ToInt32(reader["cameraQuality"]);
                            this.cpuType = reader["cpuType"] != DBNull.Value ? reader["cpuType"].ToString() : null;
                            this.batteryCapacity = Convert.ToInt32(reader["batteryCapacity"]);
                            this.tablet = Convert.ToBoolean(reader["tablet"]);
                        }
                        // else { MessageBox.Show($"No phone found with name: {in_name}", "Not Found", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Database Error (Phone.GetData): {ex.Message}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }


        public override string ToString()
        {
            return $"Phone: ID:{id}, Name:{name}, Brand:{brand}, Model:{model}, Price:{price:C}, Tablet:{tablet}, Sold:{soldCounter}";
        }

        public static string Compare(Phone a, Phone b)
        {
            if (a == null || b == null) return "Cannot compare: one or both objects are null.";
            StringBuilder sb = new StringBuilder();
            sb.AppendLine($"Comparing Phone: {a.name} vs {b.name}");
            if (a.brand != b.brand) sb.AppendLine($"Brand: {a.brand} vs {b.brand}");
            if (a.model != b.model) sb.AppendLine($"Model: {a.model} vs {b.model}");
            if (a.price != b.price) sb.AppendLine($"Price: {a.price:C} vs {b.price:C}");
            if (a.operatingSystem != b.operatingSystem) sb.AppendLine($"OS: {a.operatingSystem} vs {b.operatingSystem}");
            if (a.screenSize != b.screenSize) sb.AppendLine($"Screen Size: {a.screenSize}\" vs {b.screenSize}\"");
            if (a.storageCapacity != b.storageCapacity) sb.AppendLine($"Storage: {a.storageCapacity}GB vs {b.storageCapacity}GB");
            if (a.ramSize != b.ramSize) sb.AppendLine($"RAM: {a.ramSize}GB vs {b.ramSize}GB");
            if (a.cameraQuality != b.cameraQuality) sb.AppendLine($"Camera: {a.cameraQuality}MP vs {b.cameraQuality}MP");
            if (a.cpuType != b.cpuType) sb.AppendLine($"CPU: {a.cpuType} vs {b.cpuType}");
            if (a.batteryCapacity != b.batteryCapacity) sb.AppendLine($"Battery: {a.batteryCapacity}mAh vs {b.batteryCapacity}mAh");
            if (a.tablet != b.tablet) sb.AppendLine($"Tablet: {a.tablet} vs {b.tablet}");
            if (a.soldCounter != b.soldCounter) sb.AppendLine($"Sold Counter: {a.soldCounter} vs {b.soldCounter}");

            if (sb.Length == $"Comparing Phone: {a.name} vs {b.name}".Length + 2) // +2 for \r\n
                return $"Phone {a.name} and {b.name} have no differences in compared properties.";
            return sb.ToString();
        }
    }

    public class Fold : Phone
    {
        public string foldType { get; set; }
        public string hingeMaterial { get; set; }
        public string displayType { get; set; }
        public string durabilityRating { get; set; }
        public float sizeOfOpenedScreen { get; set; }

        // Constructor for new Fold
        public Fold(
            string name, string brand, string model, string color, float price,
            string description, int quantity, byte[] image, string qrCode,
            string operatingSystem, float screenSize, int storageCapacity, int ramSize,
            int cameraQuality, string cpuType, int batteryCapacity, bool tablet, int soldCounter,
            string foldType, string hingeMaterial, string displayType, string durabilityRating, float sizeOfOpenedScreen)
            : base(name, brand, model, color, price, description, quantity, image, qrCode,
                  operatingSystem, screenSize, storageCapacity, ramSize, cameraQuality, cpuType, batteryCapacity, tablet, soldCounter)
        {
            this.foldType = foldType;
            this.hingeMaterial = hingeMaterial;
            this.displayType = displayType;
            this.durabilityRating = durabilityRating;
            this.sizeOfOpenedScreen = sizeOfOpenedScreen;
        }

        // Constructor for existing Fold (from DB)
        public Fold(
            string name, string brand, string model, string color, float price, int id,
            string description, int quantity, byte[] image, string qrCode,
            string operatingSystem, float screenSize, int storageCapacity, int ramSize,
            int cameraQuality, string cpuType, int batteryCapacity, bool tablet, int soldCounter,
            string foldType, string hingeMaterial, string displayType, string durabilityRating, float sizeOfOpenedScreen)
            : base(name, brand, model, color, price, id, description, quantity, image, qrCode,
                  operatingSystem, screenSize, storageCapacity, ramSize, cameraQuality, cpuType, batteryCapacity, tablet, soldCounter)
        {
            this.foldType = foldType;
            this.hingeMaterial = hingeMaterial;
            this.displayType = displayType;
            this.durabilityRating = durabilityRating;
            this.sizeOfOpenedScreen = sizeOfOpenedScreen;
        }

        public Fold() : base() { } // Calls Phone's parameterless constructor

        public override void SaveToDb(string connectionString)
        {
            string mergeQuery = @"
            MERGE INTO Folds AS Target
            USING (SELECT @name AS name) AS Source
            ON Target.name = Source.name
            WHEN MATCHED THEN
                UPDATE SET brand=@brand, model=@model, color=@color, price=@price, description=@description,
                           quantity=@quantity, image=@image, QRCode=@QRCode, operatingSystem=@operatingSystem, screenSize=@screenSize,
                           storageCapacity=@storageCapacity, ramSize=@ramSize, cameraQuality=@cameraQuality, cpuType=@cpuType,
                           batteryCapacity=@batteryCapacity, tablet=@tablet, soldCounter=@soldCounter, foldType=@foldType,
                           hingeMaterial=@hingeMaterial, displayType=@displayType, durabilityRating=@durabilityRating,
                           sizeOfOpenedScreen=@sizeOfOpenedScreen
            WHEN NOT MATCHED THEN
                INSERT (name, brand, model, color, price, description, quantity, image, QRCode, operatingSystem, screenSize,
                        storageCapacity, ramSize, cameraQuality, cpuType, batteryCapacity, tablet, soldCounter, foldType,
                        hingeMaterial, displayType, durabilityRating, sizeOfOpenedScreen)
                VALUES (@name, @brand, @model, @color, @price, @description, @quantity, @image, @QRCode, @operatingSystem,
                        @screenSize, @storageCapacity, @ramSize, @cameraQuality, @cpuType, @batteryCapacity, @tablet,
                        @soldCounter, @foldType, @hingeMaterial, @displayType, @durabilityRating, @sizeOfOpenedScreen);";

            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(mergeQuery, conn))
            {
                // Phone properties
                cmd.Parameters.AddWithValue("@name", (object)name ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@brand", (object)brand ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@model", (object)model ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@color", (object)color ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@price", price);
                cmd.Parameters.AddWithValue("@description", (object)description ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@quantity", quantity);
                cmd.Parameters.AddWithValue("@image", (object)image ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@QRCode", (object)QRCode ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@soldCounter", soldCounter);
                cmd.Parameters.AddWithValue("@operatingSystem", (object)operatingSystem ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@screenSize", screenSize);
                cmd.Parameters.AddWithValue("@storageCapacity", storageCapacity);
                cmd.Parameters.AddWithValue("@ramSize", ramSize);
                cmd.Parameters.AddWithValue("@cameraQuality", cameraQuality);
                cmd.Parameters.AddWithValue("@cpuType", (object)cpuType ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@batteryCapacity", batteryCapacity);
                cmd.Parameters.AddWithValue("@tablet", tablet);

                // Fold-specific properties
                cmd.Parameters.AddWithValue("@foldType", (object)foldType ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@hingeMaterial", (object)hingeMaterial ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@displayType", (object)displayType ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@durabilityRating", (object)durabilityRating ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@sizeOfOpenedScreen", sizeOfOpenedScreen);

                try
                {
                    conn.Open();
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Database Error (Fold.SaveToDb): {ex.Message} \nQuery: {cmd.CommandText}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }
        public override void SaveToDbWithoutImage(string connectionString)
        {
            string mergeQueryNoImage = @"
            MERGE INTO Folds AS Target
            USING (SELECT @name AS name) AS Source
            ON Target.name = Source.name
            WHEN MATCHED THEN
                UPDATE SET brand=@brand, model=@model, color=@color, price=@price, description=@description,
                           quantity=@quantity, QRCode=@QRCode, operatingSystem=@operatingSystem, screenSize=@screenSize,
                           storageCapacity=@storageCapacity, ramSize=@ramSize, cameraQuality=@cameraQuality, cpuType=@cpuType,
                           batteryCapacity=@batteryCapacity, tablet=@tablet, soldCounter=@soldCounter, foldType=@foldType,
                           hingeMaterial=@hingeMaterial, displayType=@displayType, durabilityRating=@durabilityRating,
                           sizeOfOpenedScreen=@sizeOfOpenedScreen
            WHEN NOT MATCHED THEN
                INSERT (name, brand, model, color, price, description, quantity, QRCode, operatingSystem, screenSize,
                        storageCapacity, ramSize, cameraQuality, cpuType, batteryCapacity, tablet, soldCounter, foldType,
                        hingeMaterial, displayType, durabilityRating, sizeOfOpenedScreen)
                VALUES (@name, @brand, @model, @color, @price, @description, @quantity, @QRCode, @operatingSystem,
                        @screenSize, @storageCapacity, @ramSize, @cameraQuality, @cpuType, @batteryCapacity, @tablet,
                        @soldCounter, @foldType, @hingeMaterial, @displayType, @durabilityRating, @sizeOfOpenedScreen);";


            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(mergeQueryNoImage, conn))
            {
                // Phone properties
                cmd.Parameters.AddWithValue("@name", (object)name ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@brand", (object)brand ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@model", (object)model ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@color", (object)color ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@price", price);
                cmd.Parameters.AddWithValue("@description", (object)description ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@quantity", quantity);
                cmd.Parameters.AddWithValue("@QRCode", (object)QRCode ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@soldCounter", soldCounter);
                cmd.Parameters.AddWithValue("@operatingSystem", (object)operatingSystem ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@screenSize", screenSize);
                cmd.Parameters.AddWithValue("@storageCapacity", storageCapacity);
                cmd.Parameters.AddWithValue("@ramSize", ramSize);
                cmd.Parameters.AddWithValue("@cameraQuality", cameraQuality);
                cmd.Parameters.AddWithValue("@cpuType", (object)cpuType ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@batteryCapacity", batteryCapacity);
                cmd.Parameters.AddWithValue("@tablet", tablet);

                // Fold-specific properties
                cmd.Parameters.AddWithValue("@foldType", (object)foldType ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@hingeMaterial", (object)hingeMaterial ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@displayType", (object)displayType ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@durabilityRating", (object)durabilityRating ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@sizeOfOpenedScreen", sizeOfOpenedScreen);
                try
                {
                    conn.Open();
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Database Error (Fold.SaveToDbWithoutImage): {ex.Message} \nQuery: {cmd.CommandText}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }
        public override void GetData(string in_name, string connectionString)
        {
            string selectQuery = "SELECT * FROM Folds WHERE name = @name";

            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(selectQuery, conn))
            {
                cmd.Parameters.AddWithValue("@name", in_name);
                try
                {
                    conn.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            // Populate Phone properties from Folds table
                            this.id = Convert.ToInt32(reader["id"]);
                            this.name = reader["name"].ToString();
                            this.brand = reader["brand"].ToString();
                            this.model = reader["model"].ToString();
                            this.color = reader["color"].ToString();
                            this.price = Convert.ToSingle(reader["price"]);
                            this.description = reader["description"] != DBNull.Value ? reader["description"].ToString() : null;
                            this.quantity = Convert.ToInt32(reader["quantity"]);
                            this.image = reader["image"] != DBNull.Value ? (byte[])reader["image"] : null;
                            this.QRCode = reader["QRCode"].ToString();
                            this.soldCounter = reader["soldCounter"] != DBNull.Value ? Convert.ToInt32(reader["soldCounter"]) : 0;
                            this.operatingSystem = reader["operatingSystem"] != DBNull.Value ? reader["operatingSystem"].ToString() : null;
                            this.screenSize = Convert.ToSingle(reader["screenSize"]);
                            this.storageCapacity = Convert.ToInt32(reader["storageCapacity"]);
                            this.ramSize = Convert.ToInt32(reader["ramSize"]);
                            this.cameraQuality = Convert.ToInt32(reader["cameraQuality"]);
                            this.cpuType = reader["cpuType"] != DBNull.Value ? reader["cpuType"].ToString() : null;
                            this.batteryCapacity = Convert.ToInt32(reader["batteryCapacity"]);
                            this.tablet = Convert.ToBoolean(reader["tablet"]);

                            // Fold-specific properties
                            this.foldType = reader["foldType"] != DBNull.Value ? reader["foldType"].ToString() : null;
                            this.hingeMaterial = reader["hingeMaterial"] != DBNull.Value ? reader["hingeMaterial"].ToString() : null;
                            this.displayType = reader["displayType"] != DBNull.Value ? reader["displayType"].ToString() : null;
                            this.durabilityRating = reader["durabilityRating"] != DBNull.Value ? reader["durabilityRating"].ToString() : null;
                            this.sizeOfOpenedScreen = Convert.ToSingle(reader["sizeOfOpenedScreen"]);
                        }
                        // else { MessageBox.Show($"No fold phone found with name: {in_name}", "Not Found", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Database Error (Fold.GetData): {ex.Message}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }


        public override string ToString()
        {
            return $"{base.ToString()}, Fold Type: {foldType}, Opened Screen: {sizeOfOpenedScreen}\"";
        }

        public static string Compare(Fold a, Fold b)
        {
            if (a == null || b == null) return "Cannot compare: one or both objects are null.";
            StringBuilder sb = new StringBuilder();
            sb.Append(Phone.Compare(a, b)); // Leverage base class comparison

            // Check if Phone.Compare already indicated "no differences"
            string phoneComparison = Phone.Compare(a, b);
            bool phoneDifferencesFound = !phoneComparison.Contains("have no differences");


            bool foldDifferences = false;
            if (a.foldType != b.foldType) { sb.AppendLine($"Fold Type: {a.foldType} vs {b.foldType}"); foldDifferences = true; }
            if (a.hingeMaterial != b.hingeMaterial) { sb.AppendLine($"Hinge Material: {a.hingeMaterial} vs {b.hingeMaterial}"); foldDifferences = true; }
            if (a.displayType != b.displayType) { sb.AppendLine($"Display Type: {a.displayType} vs {b.displayType}"); foldDifferences = true; }
            if (a.durabilityRating != b.durabilityRating) { sb.AppendLine($"Durability: {a.durabilityRating} vs {b.durabilityRating}"); foldDifferences = true; }
            if (a.sizeOfOpenedScreen != b.sizeOfOpenedScreen) { sb.AppendLine($"Opened Screen Size: {a.sizeOfOpenedScreen}\" vs {b.sizeOfOpenedScreen}\""); foldDifferences = true; }

            if (!phoneDifferencesFound && !foldDifferences)
            {
                return $"Fold {a.name} and {b.name} have no differences in compared properties.";
            }
            else if (!foldDifferences && phoneDifferencesFound)
            {
                // Phone.Compare already has all the diffs
                return phoneComparison;
            }

            return sb.ToString();
        }
    }

    public class Laptop : Electronics
    {
        public string operatingSystem { get; set; }
        public int storageCapacity { get; set; }
        public int ramSize { get; set; }
        public string graphicsCard { get; set; }
        public string cpuType { get; set; }
        public float screenSize { get; set; }
        public string batteryLife { get; set; }

        // Constructor for new Laptop
        public Laptop(
            string name, string brand, string model, string color, float price,
            string description, int quantity, byte[] image, string qrCode, int soldCounter,
            string operatingSystem, int storageCapacity, int ramSize, string graphicsCard,
            string cpuType, float screenSize, string batteryLife)
            : base(name, brand, model, color, price, description, quantity, image, qrCode, soldCounter)
        {
            this.operatingSystem = operatingSystem; this.storageCapacity = storageCapacity; this.ramSize = ramSize;
            this.graphicsCard = graphicsCard; this.cpuType = cpuType; this.screenSize = screenSize; this.batteryLife = batteryLife;
        }

        // Constructor for existing Laptop (from DB)
        public Laptop(
            string name, string brand, string model, string color, float price, int id,
            string description, int quantity, byte[] image, string qrCode, int soldCounter,
            string operatingSystem, int storageCapacity, int ramSize, string graphicsCard,
            string cpuType, float screenSize, string batteryLife)
            : base(name, brand, model, color, price, id, description, quantity, image, qrCode, soldCounter)
        {
            this.operatingSystem = operatingSystem; this.storageCapacity = storageCapacity; this.ramSize = ramSize;
            this.graphicsCard = graphicsCard; this.cpuType = cpuType; this.screenSize = screenSize; this.batteryLife = batteryLife;
        }
        public Laptop() : base(null, null, null, null, 0, 0, null, 0, null, null) { }


        public override void SaveToDb(string connectionString)
        {
            string mergeQuery = @"
            MERGE INTO Laptops AS Target
            USING (SELECT @name AS name) AS Source ON Target.name = Source.name
            WHEN MATCHED THEN
                UPDATE SET brand=@brand, model=@model, color=@color, price=@price, description=@description,
                           quantity=@quantity, image=@image, QRCode=@QRCode, operatingSystem=@operatingSystem,
                           storageCapacity=@storageCapacity, ramSize=@ramSize, graphicsCard=@graphicsCard,
                           cpuType=@cpuType, screenSize=@screenSize, batteryLife=@batteryLife, soldCounter=@soldCounter
            WHEN NOT MATCHED THEN
                INSERT (name, brand, model, color, price, description, quantity, image, QRCode, operatingSystem,
                        storageCapacity, ramSize, graphicsCard, cpuType, screenSize, batteryLife, soldCounter)
                VALUES (@name, @brand, @model, @color, @price, @description, @quantity, @image, @QRCode, @operatingSystem,
                        @storageCapacity, @ramSize, @graphicsCard, @cpuType, @screenSize, @batteryLife, @soldCounter);";

            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(mergeQuery, conn))
            {
                cmd.Parameters.AddWithValue("@name", (object)name ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@brand", (object)brand ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@model", (object)model ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@color", (object)color ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@price", price);
                cmd.Parameters.AddWithValue("@description", (object)description ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@quantity", quantity);
                cmd.Parameters.AddWithValue("@image", (object)image ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@QRCode", (object)QRCode ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@soldCounter", soldCounter);
                cmd.Parameters.AddWithValue("@operatingSystem", (object)operatingSystem ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@storageCapacity", storageCapacity);
                cmd.Parameters.AddWithValue("@ramSize", ramSize);
                cmd.Parameters.AddWithValue("@graphicsCard", (object)graphicsCard ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@cpuType", (object)cpuType ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@screenSize", screenSize);
                cmd.Parameters.AddWithValue("@batteryLife", (object)batteryLife ?? DBNull.Value);

                try
                {
                    conn.Open();
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Database Error (Laptop.SaveToDb): {ex.Message} \nQuery: {cmd.CommandText}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }
        public override void SaveToDbWithoutImage(string connectionString)
        {
            string mergeQueryNoImage = @"
            MERGE INTO Laptops AS Target
            USING (SELECT @name AS name) AS Source ON Target.name = Source.name
            WHEN MATCHED THEN
                UPDATE SET brand=@brand, model=@model, color=@color, price=@price, description=@description,
                           quantity=@quantity, QRCode=@QRCode, operatingSystem=@operatingSystem,
                           storageCapacity=@storageCapacity, ramSize=@ramSize, graphicsCard=@graphicsCard,
                           cpuType=@cpuType, screenSize=@screenSize, batteryLife=@batteryLife, soldCounter=@soldCounter
            WHEN NOT MATCHED THEN
                INSERT (name, brand, model, color, price, description, quantity, QRCode, operatingSystem,
                        storageCapacity, ramSize, graphicsCard, cpuType, screenSize, batteryLife, soldCounter)
                VALUES (@name, @brand, @model, @color, @price, @description, @quantity, @QRCode, @operatingSystem,
                        @storageCapacity, @ramSize, @graphicsCard, @cpuType, @screenSize, @batteryLife, @soldCounter);";

            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(mergeQueryNoImage, conn))
            {
                cmd.Parameters.AddWithValue("@name", (object)name ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@brand", (object)brand ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@model", (object)model ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@color", (object)color ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@price", price);
                cmd.Parameters.AddWithValue("@description", (object)description ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@quantity", quantity);
                cmd.Parameters.AddWithValue("@QRCode", (object)QRCode ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@soldCounter", soldCounter);
                cmd.Parameters.AddWithValue("@operatingSystem", (object)operatingSystem ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@storageCapacity", storageCapacity);
                cmd.Parameters.AddWithValue("@ramSize", ramSize);
                cmd.Parameters.AddWithValue("@graphicsCard", (object)graphicsCard ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@cpuType", (object)cpuType ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@screenSize", screenSize);
                cmd.Parameters.AddWithValue("@batteryLife", (object)batteryLife ?? DBNull.Value);
                try
                {
                    conn.Open();
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Database Error (Laptop.SaveToDbWithoutImage): {ex.Message} \nQuery: {cmd.CommandText}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }
        public override void GetData(string in_name, string connectionString)
        {
            string idColumnNameToUse = "id"; // Default
            string specificIdColName = "laptop_id"; // Specific for Laptops table if it exists

            string selectQuery = $"SELECT * FROM Laptops WHERE name = @name";

            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(selectQuery, conn))
            {
                cmd.Parameters.AddWithValue("@name", in_name);
                try
                {
                    conn.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            bool specificIdColumnExists = false;
                            for (int i = 0; i < reader.FieldCount; i++)
                            {
                                if (reader.GetName(i).Equals(specificIdColName, StringComparison.OrdinalIgnoreCase))
                                {
                                    specificIdColumnExists = true;
                                    break;
                                }
                            }
                            idColumnNameToUse = specificIdColumnExists ? specificIdColName : "id";

                            this.id = Convert.ToInt32(reader[idColumnNameToUse]);
                            this.name = reader["name"].ToString();
                            this.brand = reader["brand"].ToString();
                            this.model = reader["model"].ToString();
                            this.color = reader["color"].ToString();
                            this.price = Convert.ToSingle(reader["price"]);
                            this.description = reader["description"] != DBNull.Value ? reader["description"].ToString() : null;
                            this.quantity = Convert.ToInt32(reader["quantity"]);
                            this.image = reader["image"] != DBNull.Value ? (byte[])reader["image"] : null;
                            this.QRCode = reader["QRCode"].ToString();
                            this.soldCounter = reader["soldCounter"] != DBNull.Value ? Convert.ToInt32(reader["soldCounter"]) : 0;
                            this.operatingSystem = reader["operatingSystem"] != DBNull.Value ? reader["operatingSystem"].ToString() : null;
                            this.storageCapacity = Convert.ToInt32(reader["storageCapacity"]);
                            this.ramSize = Convert.ToInt32(reader["ramSize"]);
                            this.graphicsCard = reader["graphicsCard"] != DBNull.Value ? reader["graphicsCard"].ToString() : null;
                            this.cpuType = reader["cpuType"] != DBNull.Value ? reader["cpuType"].ToString() : null;
                            this.screenSize = Convert.ToSingle(reader["screenSize"]);
                            this.batteryLife = reader["batteryLife"] != DBNull.Value ? reader["batteryLife"].ToString() : null;
                        }
                        // else { MessageBox.Show($"No laptop found with name: {in_name}", "Not Found", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Database Error (Laptop.GetData): {ex.Message}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }
        public override string ToString()
        {
            return $"Laptop: ID:{id}, Name:{name}, Brand:{brand}, Price:{price:C}, Sold:{soldCounter}";
        }
        public static string Compare(Laptop a, Laptop b)
        {
            if (a == null || b == null) return "Cannot compare: one or both objects are null.";
            StringBuilder sb = new StringBuilder();
            sb.AppendLine($"Comparing Laptop: {a.name} vs {b.name}");
            if (a.brand != b.brand) sb.AppendLine($"Brand: {a.brand} vs {b.brand}");
            if (a.model != b.model) sb.AppendLine($"Model: {a.model} vs {b.model}");
            if (a.price != b.price) sb.AppendLine($"Price: {a.price:C} vs {b.price:C}");
            if (a.operatingSystem != b.operatingSystem) sb.AppendLine($"OS: {a.operatingSystem} vs {b.operatingSystem}");
            if (a.storageCapacity != b.storageCapacity) sb.AppendLine($"Storage: {a.storageCapacity}GB vs {b.storageCapacity}GB");
            if (a.ramSize != b.ramSize) sb.AppendLine($"RAM: {a.ramSize}GB vs {b.ramSize}GB");
            if (a.graphicsCard != b.graphicsCard) sb.AppendLine($"Graphics: {a.graphicsCard} vs {b.graphicsCard}");
            if (a.cpuType != b.cpuType) sb.AppendLine($"CPU: {a.cpuType} vs {b.cpuType}");
            if (a.screenSize != b.screenSize) sb.AppendLine($"Screen Size: {a.screenSize}\" vs {b.screenSize}\"");
            if (a.batteryLife != b.batteryLife) sb.AppendLine($"Battery Life: {a.batteryLife} vs {b.batteryLife}");
            if (a.soldCounter != b.soldCounter) sb.AppendLine($"Sold Counter: {a.soldCounter} vs {b.soldCounter}");

            if (sb.Length == $"Comparing Laptop: {a.name} vs {b.name}".Length + 2)
                return $"Laptop {a.name} and {b.name} have no differences in compared properties.";
            return sb.ToString();
        }
    }

    public class GamingLaptop : Laptop
    {
        public string coolingSystem { get; set; }
        public string keyboardType { get; set; }
        public int frameRate { get; set; }

        // Constructor for new GamingLaptop
        public GamingLaptop(
            string name, string brand, string model, string color, float price,
            string description, int quantity, byte[] image, string qrCode, int soldCounter,
            string operatingSystem, int storageCapacity, int ramSize, string graphicsCard,
            string cpuType, float screenSize, string batteryLife,
            string coolingSystem, string keyboardType, int frameRate)
            : base(name, brand, model, color, price, description, quantity, image, qrCode, soldCounter,
                  operatingSystem, storageCapacity, ramSize, graphicsCard, cpuType, screenSize, batteryLife)
        { this.coolingSystem = coolingSystem; this.keyboardType = keyboardType; this.frameRate = frameRate; }

        // Constructor for existing GamingLaptop (from DB)
        public GamingLaptop(
            string name, string brand, string model, string color, float price, int id,
            string description, int quantity, byte[] image, string qrCode, int soldCounter,
            string operatingSystem, int storageCapacity, int ramSize, string graphicsCard,
            string cpuType, float screenSize, string batteryLife,
            string coolingSystem, string keyboardType, int frameRate)
            : base(name, brand, model, color, price, id, description, quantity, image, qrCode, soldCounter,
                  operatingSystem, storageCapacity, ramSize, graphicsCard, cpuType, screenSize, batteryLife)
        { this.coolingSystem = coolingSystem; this.keyboardType = keyboardType; this.frameRate = frameRate; }
        public GamingLaptop() : base() { }

        public override void SaveToDb(string connectionString)
        {
            string mergeQuery = @"
            MERGE INTO GamingLaptops AS Target
            USING (SELECT @name AS name) AS Source ON Target.name = Source.name
            WHEN MATCHED THEN
                UPDATE SET brand=@brand, model=@model, color=@color, price=@price, description=@description,
                           quantity=@quantity, image=@image, QRCode=@QRCode, operatingSystem=@operatingSystem,
                           storageCapacity=@storageCapacity, ramSize=@ramSize, graphicsCard=@graphicsCard,
                           cpuType=@cpuType, screenSize=@screenSize, batteryLife=@batteryLife, soldCounter=@soldCounter,
                           coolingSystem=@coolingSystem, keyboardType=@keyboardType, frameRate=@frameRate
            WHEN NOT MATCHED THEN
                INSERT (name, brand, model, color, price, description, quantity, image, QRCode, operatingSystem,
                        storageCapacity, ramSize, graphicsCard, cpuType, screenSize, batteryLife, soldCounter,
                        coolingSystem, keyboardType, frameRate)
                VALUES (@name, @brand, @model, @color, @price, @description, @quantity, @image, @QRCode,
                        @operatingSystem, @storageCapacity, @ramSize, @graphicsCard, @cpuType, @screenSize,
                        @batteryLife, @soldCounter, @coolingSystem, @keyboardType, @frameRate);";
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(mergeQuery, conn))
            {
                cmd.Parameters.AddWithValue("@name", (object)name ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@brand", (object)brand ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@model", (object)model ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@color", (object)color ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@price", price);
                cmd.Parameters.AddWithValue("@description", (object)description ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@quantity", quantity);
                cmd.Parameters.AddWithValue("@image", (object)image ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@QRCode", (object)QRCode ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@soldCounter", soldCounter);
                cmd.Parameters.AddWithValue("@operatingSystem", (object)operatingSystem ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@storageCapacity", storageCapacity);
                cmd.Parameters.AddWithValue("@ramSize", ramSize);
                cmd.Parameters.AddWithValue("@graphicsCard", (object)graphicsCard ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@cpuType", (object)cpuType ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@screenSize", screenSize);
                cmd.Parameters.AddWithValue("@batteryLife", (object)batteryLife ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@coolingSystem", (object)coolingSystem ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@keyboardType", (object)keyboardType ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@frameRate", frameRate);
                try
                {
                    conn.Open();
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Database Error (GamingLaptop.SaveToDb): {ex.Message} \nQuery: {cmd.CommandText}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }
        public override void SaveToDbWithoutImage(string connectionString)
        {
            string mergeQueryNoImage = @"
            MERGE INTO GamingLaptops AS Target
            USING (SELECT @name AS name) AS Source ON Target.name = Source.name
            WHEN MATCHED THEN
                UPDATE SET brand=@brand, model=@model, color=@color, price=@price, description=@description,
                           quantity=@quantity, QRCode=@QRCode, operatingSystem=@operatingSystem,
                           storageCapacity=@storageCapacity, ramSize=@ramSize, graphicsCard=@graphicsCard,
                           cpuType=@cpuType, screenSize=@screenSize, batteryLife=@batteryLife, soldCounter=@soldCounter,
                           coolingSystem=@coolingSystem, keyboardType=@keyboardType, frameRate=@frameRate
            WHEN NOT MATCHED THEN
                INSERT (name, brand, model, color, price, description, quantity, QRCode, operatingSystem,
                        storageCapacity, ramSize, graphicsCard, cpuType, screenSize, batteryLife, soldCounter,
                        coolingSystem, keyboardType, frameRate)
                VALUES (@name, @brand, @model, @color, @price, @description, @quantity, @QRCode,
                        @operatingSystem, @storageCapacity, @ramSize, @graphicsCard, @cpuType, @screenSize,
                        @batteryLife, @soldCounter, @coolingSystem, @keyboardType, @frameRate);";
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(mergeQueryNoImage, conn))
            {
                cmd.Parameters.AddWithValue("@name", (object)name ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@brand", (object)brand ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@model", (object)model ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@color", (object)color ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@price", price);
                cmd.Parameters.AddWithValue("@description", (object)description ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@quantity", quantity);
                cmd.Parameters.AddWithValue("@QRCode", (object)QRCode ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@soldCounter", soldCounter);
                cmd.Parameters.AddWithValue("@operatingSystem", (object)operatingSystem ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@storageCapacity", storageCapacity);
                cmd.Parameters.AddWithValue("@ramSize", ramSize);
                cmd.Parameters.AddWithValue("@graphicsCard", (object)graphicsCard ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@cpuType", (object)cpuType ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@screenSize", screenSize);
                cmd.Parameters.AddWithValue("@batteryLife", (object)batteryLife ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@coolingSystem", (object)coolingSystem ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@keyboardType", (object)keyboardType ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@frameRate", frameRate);
                try
                {
                    conn.Open();
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Database Error (GamingLaptop.SaveToDbWithoutImage): {ex.Message} \nQuery: {cmd.CommandText}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }
        public override void GetData(string in_name, string connectionString)
        {
            string selectQuery = "SELECT * FROM GamingLaptops WHERE name = @name";
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(selectQuery, conn))
            {
                cmd.Parameters.AddWithValue("@name", in_name);
                try
                {
                    conn.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            this.id = Convert.ToInt32(reader["id"]); // PK
                            // Populate Laptop properties
                            this.name = reader["name"].ToString();
                            this.brand = reader["brand"].ToString();
                            this.model = reader["model"].ToString();
                            this.color = reader["color"].ToString();
                            this.price = Convert.ToSingle(reader["price"]);
                            this.description = reader["description"] != DBNull.Value ? reader["description"].ToString() : null;
                            this.quantity = Convert.ToInt32(reader["quantity"]);
                            this.image = reader["image"] != DBNull.Value ? (byte[])reader["image"] : null;
                            this.QRCode = reader["QRCode"].ToString();
                            this.soldCounter = reader["soldCounter"] != DBNull.Value ? Convert.ToInt32(reader["soldCounter"]) : 0;
                            this.operatingSystem = reader["operatingSystem"] != DBNull.Value ? reader["operatingSystem"].ToString() : null;
                            this.storageCapacity = Convert.ToInt32(reader["storageCapacity"]);
                            this.ramSize = Convert.ToInt32(reader["ramSize"]);
                            this.graphicsCard = reader["graphicsCard"] != DBNull.Value ? reader["graphicsCard"].ToString() : null;
                            this.cpuType = reader["cpuType"] != DBNull.Value ? reader["cpuType"].ToString() : null;
                            this.screenSize = Convert.ToSingle(reader["screenSize"]);
                            this.batteryLife = reader["batteryLife"] != DBNull.Value ? reader["batteryLife"].ToString() : null;
                            // GamingLaptop specific
                            this.coolingSystem = reader["coolingSystem"] != DBNull.Value ? reader["coolingSystem"].ToString() : null;
                            this.keyboardType = reader["keyboardType"] != DBNull.Value ? reader["keyboardType"].ToString() : null;
                            this.frameRate = Convert.ToInt32(reader["frameRate"]);
                        }
                        // else { MessageBox.Show($"No gaming laptop found with name: {in_name}", "Not Found", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Database Error (GamingLaptop.GetData): {ex.Message}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }
        public override string ToString()
        {
            return $"{base.ToString()}, Cooling: {coolingSystem}, Keyboard: {keyboardType}, Max FPS: {frameRate}";
        }
        public static string Compare(GamingLaptop a, GamingLaptop b)
        {
            if (a == null || b == null) return "Cannot compare: one or both objects are null.";
            StringBuilder sb = new StringBuilder();
            string laptopComparison = Laptop.Compare(a, b);
            bool laptopDifferencesFound = !laptopComparison.Contains("have no differences");

            if (laptopDifferencesFound)
            {
                sb.Append(laptopComparison.Substring(0, laptopComparison.LastIndexOf("\r\n") > 0 ? laptopComparison.LastIndexOf("\r\n") : laptopComparison.Length)); // Remove "no differences" part if present
                if (!laptopComparison.EndsWith("\r\n")) sb.AppendLine(); // Ensure newline if base comparison didn't end with one and had diffs
            }
            else
            {
                sb.AppendLine($"Comparing Gaming Laptop: {a.name} vs {b.name}"); // Add header if base had no diffs
            }


            bool gamingDifferences = false;
            if (a.coolingSystem != b.coolingSystem) { sb.AppendLine($"Cooling: {a.coolingSystem} vs {b.coolingSystem}"); gamingDifferences = true; }
            if (a.keyboardType != b.keyboardType) { sb.AppendLine($"Keyboard: {a.keyboardType} vs {b.keyboardType}"); gamingDifferences = true; }
            if (a.frameRate != b.frameRate) { sb.AppendLine($"FPS: {a.frameRate} vs {b.frameRate}"); gamingDifferences = true; }

            if (!laptopDifferencesFound && !gamingDifferences)
            {
                return $"Gaming Laptop {a.name} and {b.name} have no differences in compared properties.";
            }

            return sb.ToString().TrimEnd();
        }
    }

    public class TwoInOne : Laptop
    {
        public bool detachableKeyboard { get; set; }
        public string hingeType { get; set; }

        // Constructor for new TwoInOne
        public TwoInOne(
             string name, string brand, string model, string color, float price,
             string description, int quantity, byte[] image, string qrCode, int soldCounter,
             string operatingSystem, int storageCapacity, int ramSize, string graphicsCard,
             string cpuType, float screenSize, string batteryLife,
             bool detachableKeyboard, string hingeType)
            : base(name, brand, model, color, price, description, quantity, image, qrCode, soldCounter,
                  operatingSystem, storageCapacity, ramSize, graphicsCard, cpuType, screenSize, batteryLife)
        { this.detachableKeyboard = detachableKeyboard; this.hingeType = hingeType; }

        // Constructor for existing TwoInOne (from DB)
        public TwoInOne(
             string name, string brand, string model, string color, float price, int id,
             string description, int quantity, byte[] image, string qrCode, int soldCounter,
             string operatingSystem, int storageCapacity, int ramSize, string graphicsCard,
             string cpuType, float screenSize, string batteryLife,
             bool detachableKeyboard, string hingeType)
            : base(name, brand, model, color, price, id, description, quantity, image, qrCode, soldCounter,
                  operatingSystem, storageCapacity, ramSize, graphicsCard, cpuType, screenSize, batteryLife)
        { this.detachableKeyboard = detachableKeyboard; this.hingeType = hingeType; }
        public TwoInOne() : base() { }

        public override void SaveToDb(string connectionString)
        {
            string mergeQuery = @"
            MERGE INTO TwoInOnes AS Target
            USING (SELECT @name AS name) AS Source ON Target.name = Source.name
            WHEN MATCHED THEN
                UPDATE SET brand=@brand, model=@model, color=@color, price=@price, description=@description,
                           quantity=@quantity, image=@image, QRCode=@QRCode, operatingSystem=@operatingSystem,
                           storageCapacity=@storageCapacity, ramSize=@ramSize, graphicsCard=@graphicsCard,
                           cpuType=@cpuType, screenSize=@screenSize, batteryLife=@batteryLife, soldCounter=@soldCounter,
                           detachableKeyboard=@detachableKeyboard, hingeType=@hingeType
            WHEN NOT MATCHED THEN
                INSERT (name, brand, model, color, price, description, quantity, image, QRCode, operatingSystem,
                        storageCapacity, ramSize, graphicsCard, cpuType, screenSize, batteryLife, soldCounter,
                        detachableKeyboard, hingeType)
                VALUES (@name, @brand, @model, @color, @price, @description, @quantity, @image, @QRCode,
                        @operatingSystem, @storageCapacity, @ramSize, @graphicsCard, @cpuType, @screenSize,
                        @batteryLife, @soldCounter, @detachableKeyboard, @hingeType);";
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(mergeQuery, conn))
            {
                cmd.Parameters.AddWithValue("@name", (object)name ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@brand", (object)brand ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@model", (object)model ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@color", (object)color ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@price", price);
                cmd.Parameters.AddWithValue("@description", (object)description ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@quantity", quantity);
                cmd.Parameters.AddWithValue("@image", (object)image ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@QRCode", (object)QRCode ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@soldCounter", soldCounter);
                cmd.Parameters.AddWithValue("@operatingSystem", (object)operatingSystem ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@storageCapacity", storageCapacity);
                cmd.Parameters.AddWithValue("@ramSize", ramSize);
                cmd.Parameters.AddWithValue("@graphicsCard", (object)graphicsCard ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@cpuType", (object)cpuType ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@screenSize", screenSize);
                cmd.Parameters.AddWithValue("@batteryLife", (object)batteryLife ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@detachableKeyboard", detachableKeyboard);
                cmd.Parameters.AddWithValue("@hingeType", (object)hingeType ?? DBNull.Value);
                try
                {
                    conn.Open();
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Database Error (TwoInOne.SaveToDb): {ex.Message} \nQuery: {cmd.CommandText}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }
        public override void SaveToDbWithoutImage(string connectionString)
        {
            string mergeQueryNoImage = @"
            MERGE INTO TwoInOnes AS Target
            USING (SELECT @name AS name) AS Source ON Target.name = Source.name
            WHEN MATCHED THEN
                UPDATE SET brand=@brand, model=@model, color=@color, price=@price, description=@description,
                           quantity=@quantity, QRCode=@QRCode, operatingSystem=@operatingSystem,
                           storageCapacity=@storageCapacity, ramSize=@ramSize, graphicsCard=@graphicsCard,
                           cpuType=@cpuType, screenSize=@screenSize, batteryLife=@batteryLife, soldCounter=@soldCounter,
                           detachableKeyboard=@detachableKeyboard, hingeType=@hingeType
            WHEN NOT MATCHED THEN
                INSERT (name, brand, model, color, price, description, quantity, QRCode, operatingSystem,
                        storageCapacity, ramSize, graphicsCard, cpuType, screenSize, batteryLife, soldCounter,
                        detachableKeyboard, hingeType)
                VALUES (@name, @brand, @model, @color, @price, @description, @quantity, @QRCode,
                        @operatingSystem, @storageCapacity, @ramSize, @graphicsCard, @cpuType, @screenSize,
                        @batteryLife, @soldCounter, @detachableKeyboard, @hingeType);";
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(mergeQueryNoImage, conn))
            {
                cmd.Parameters.AddWithValue("@name", (object)name ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@brand", (object)brand ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@model", (object)model ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@color", (object)color ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@price", price);
                cmd.Parameters.AddWithValue("@description", (object)description ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@quantity", quantity);
                cmd.Parameters.AddWithValue("@QRCode", (object)QRCode ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@soldCounter", soldCounter);
                cmd.Parameters.AddWithValue("@operatingSystem", (object)operatingSystem ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@storageCapacity", storageCapacity);
                cmd.Parameters.AddWithValue("@ramSize", ramSize);
                cmd.Parameters.AddWithValue("@graphicsCard", (object)graphicsCard ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@cpuType", (object)cpuType ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@screenSize", screenSize);
                cmd.Parameters.AddWithValue("@batteryLife", (object)batteryLife ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@detachableKeyboard", detachableKeyboard);
                cmd.Parameters.AddWithValue("@hingeType", (object)hingeType ?? DBNull.Value);
                try
                {
                    conn.Open();
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Database Error (TwoInOne.SaveToDbWithoutImage): {ex.Message} \nQuery: {cmd.CommandText}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }
        public override void GetData(string in_name, string connectionString)
        {
            string selectQuery = "SELECT * FROM TwoInOnes WHERE name = @name";
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(selectQuery, conn))
            {
                cmd.Parameters.AddWithValue("@name", in_name);
                try
                {
                    conn.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            this.id = Convert.ToInt32(reader["id"]); // PK
                            // Populate Laptop properties
                            this.name = reader["name"].ToString();
                            this.brand = reader["brand"].ToString();
                            this.model = reader["model"].ToString();
                            this.color = reader["color"].ToString();
                            this.price = Convert.ToSingle(reader["price"]);
                            this.description = reader["description"] != DBNull.Value ? reader["description"].ToString() : null;
                            this.quantity = Convert.ToInt32(reader["quantity"]);
                            this.image = reader["image"] != DBNull.Value ? (byte[])reader["image"] : null;
                            this.QRCode = reader["QRCode"].ToString();
                            this.soldCounter = reader["soldCounter"] != DBNull.Value ? Convert.ToInt32(reader["soldCounter"]) : 0;
                            this.operatingSystem = reader["operatingSystem"] != DBNull.Value ? reader["operatingSystem"].ToString() : null;
                            this.storageCapacity = Convert.ToInt32(reader["storageCapacity"]);
                            this.ramSize = Convert.ToInt32(reader["ramSize"]);
                            this.graphicsCard = reader["graphicsCard"] != DBNull.Value ? reader["graphicsCard"].ToString() : null;
                            this.cpuType = reader["cpuType"] != DBNull.Value ? reader["cpuType"].ToString() : null;
                            this.screenSize = Convert.ToSingle(reader["screenSize"]);
                            this.batteryLife = reader["batteryLife"] != DBNull.Value ? reader["batteryLife"].ToString() : null;
                            // TwoInOne specific
                            this.detachableKeyboard = Convert.ToBoolean(reader["detachableKeyboard"]);
                            this.hingeType = reader["hingeType"] != DBNull.Value ? reader["hingeType"].ToString() : null;
                        }
                        // else { MessageBox.Show($"No 2-in-1 laptop found with name: {in_name}", "Not Found", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Database Error (TwoInOne.GetData): {ex.Message}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }
        public override string ToString()
        {
            return $"{base.ToString()}, Detachable: {detachableKeyboard}, Hinge: {hingeType}";
        }
        public static string Compare(TwoInOne a, TwoInOne b)
        {
            if (a == null || b == null) return "Cannot compare: one or both objects are null.";
            StringBuilder sb = new StringBuilder();
            string laptopComparison = Laptop.Compare(a, b);
            bool laptopDifferencesFound = !laptopComparison.Contains("have no differences");

            if (laptopDifferencesFound)
            {
                sb.Append(laptopComparison.Substring(0, laptopComparison.LastIndexOf("\r\n") > 0 ? laptopComparison.LastIndexOf("\r\n") : laptopComparison.Length));
                if (!laptopComparison.EndsWith("\r\n")) sb.AppendLine();
            }
            else
            {
                sb.AppendLine($"Comparing 2-in-1 Laptop: {a.name} vs {b.name}");
            }

            bool twoInOneDifferences = false;
            if (a.detachableKeyboard != b.detachableKeyboard) { sb.AppendLine($"Detachable Keyboard: {a.detachableKeyboard} vs {b.detachableKeyboard}"); twoInOneDifferences = true; }
            if (a.hingeType != b.hingeType) { sb.AppendLine($"Hinge Type: {a.hingeType} vs {b.hingeType}"); twoInOneDifferences = true; }

            if (!laptopDifferencesFound && !twoInOneDifferences)
            {
                return $"2-in-1 Laptop {a.name} and {b.name} have no differences in compared properties.";
            }

            return sb.ToString().TrimEnd();
        }
    }

    public class Cpu : Electronics
    {
        public int cores { get; set; }
        public float frequencyGHz { get; set; }
        public string socketType { get; set; }

        // Constructor for new CPU
        public Cpu(
            string name, string brand, string model, string color, float price,
            string description, int quantity, byte[] image, string qrCode, int soldCounter,
            int cores, float frequencyGHz, string socketType)
            : base(name, brand, model, color, price, description, quantity, image, qrCode, soldCounter)
        { this.cores = cores; this.frequencyGHz = frequencyGHz; this.socketType = socketType; }

        // Constructor for existing CPU (from DB)
        public Cpu(
            string name, string brand, string model, string color, float price, int id,
            string description, int quantity, byte[] image, string qrCode, int soldCounter,
            int cores, float frequencyGHz, string socketType)
            : base(name, brand, model, color, price, id, description, quantity, image, qrCode, soldCounter)
        { this.cores = cores; this.frequencyGHz = frequencyGHz; this.socketType = socketType; }
        public Cpu() : base(null, null, null, null, 0, 0, null, 0, null, null) { }

        public override void SaveToDb(string connectionString)
        {
            string mergeQuery = @"
            MERGE INTO Cpus AS Target
            USING (SELECT @name AS name) AS Source ON Target.name = Source.name
            WHEN MATCHED THEN
                UPDATE SET brand=@brand, model=@model, color=@color, price=@price, description=@description,
                           quantity=@quantity, image=@image, QRCode=@QRCode, soldCounter=@soldCounter,
                           cores=@cores, frequencyGHz=@frequencyGHz, socketType=@socketType
            WHEN NOT MATCHED THEN
                INSERT (name, brand, model, color, price, description, quantity, image, QRCode, soldCounter,
                        cores, frequencyGHz, socketType)
                VALUES (@name, @brand, @model, @color, @price, @description, @quantity, @image, @QRCode, @soldCounter,
                        @cores, @frequencyGHz, @socketType);";
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(mergeQuery, conn))
            {
                cmd.Parameters.AddWithValue("@name", (object)name ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@brand", (object)brand ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@model", (object)model ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@color", (object)color ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@price", price);
                cmd.Parameters.AddWithValue("@description", (object)description ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@quantity", quantity);
                cmd.Parameters.AddWithValue("@image", (object)image ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@QRCode", (object)QRCode ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@soldCounter", soldCounter);
                cmd.Parameters.AddWithValue("@cores", cores);
                cmd.Parameters.AddWithValue("@frequencyGHz", frequencyGHz);
                cmd.Parameters.AddWithValue("@socketType", (object)socketType ?? DBNull.Value);
                try
                {
                    conn.Open();
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Database Error (Cpu.SaveToDb): {ex.Message} \nQuery: {cmd.CommandText}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }
        public override void SaveToDbWithoutImage(string connectionString)
        {
            string mergeQueryNoImage = @"
            MERGE INTO Cpus AS Target
            USING (SELECT @name AS name) AS Source ON Target.name = Source.name
            WHEN MATCHED THEN
                UPDATE SET brand=@brand, model=@model, color=@color, price=@price, description=@description,
                           quantity=@quantity, QRCode=@QRCode, soldCounter=@soldCounter,
                           cores=@cores, frequencyGHz=@frequencyGHz, socketType=@socketType
            WHEN NOT MATCHED THEN
                INSERT (name, brand, model, color, price, description, quantity, QRCode, soldCounter,
                        cores, frequencyGHz, socketType)
                VALUES (@name, @brand, @model, @color, @price, @description, @quantity, @QRCode, @soldCounter,
                        @cores, @frequencyGHz, @socketType);";
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(mergeQueryNoImage, conn))
            {
                cmd.Parameters.AddWithValue("@name", (object)name ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@brand", (object)brand ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@model", (object)model ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@color", (object)color ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@price", price);
                cmd.Parameters.AddWithValue("@description", (object)description ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@quantity", quantity);
                cmd.Parameters.AddWithValue("@QRCode", (object)QRCode ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@soldCounter", soldCounter);
                cmd.Parameters.AddWithValue("@cores", cores);
                cmd.Parameters.AddWithValue("@frequencyGHz", frequencyGHz);
                cmd.Parameters.AddWithValue("@socketType", (object)socketType ?? DBNull.Value);
                try
                {
                    conn.Open();
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Database Error (Cpu.SaveToDbWithoutImage): {ex.Message} \nQuery: {cmd.CommandText}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }
        public override void GetData(string in_name, string connectionString)
        {
            string idColumnNameToUse = "id";
            string specificIdColName = "cpu_id";
            string selectQuery = $"SELECT * FROM Cpus WHERE name = @name";

            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(selectQuery, conn))
            {
                cmd.Parameters.AddWithValue("@name", in_name);
                try
                {
                    conn.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            bool specificIdColumnExists = false;
                            for (int i = 0; i < reader.FieldCount; i++)
                            {
                                if (reader.GetName(i).Equals(specificIdColName, StringComparison.OrdinalIgnoreCase))
                                {
                                    specificIdColumnExists = true;
                                    break;
                                }
                            }
                            idColumnNameToUse = specificIdColumnExists ? specificIdColName : "id";

                            this.id = Convert.ToInt32(reader[idColumnNameToUse]);
                            this.name = reader["name"].ToString();
                            this.brand = reader["brand"].ToString();
                            this.model = reader["model"].ToString();
                            this.color = reader["color"].ToString();
                            this.price = Convert.ToSingle(reader["price"]);
                            this.description = reader["description"] != DBNull.Value ? reader["description"].ToString() : null;
                            this.quantity = Convert.ToInt32(reader["quantity"]);
                            this.image = reader["image"] != DBNull.Value ? (byte[])reader["image"] : null;
                            this.QRCode = reader["QRCode"].ToString();
                            this.soldCounter = reader["soldCounter"] != DBNull.Value ? Convert.ToInt32(reader["soldCounter"]) : 0;
                            this.cores = Convert.ToInt32(reader["cores"]);
                            this.frequencyGHz = Convert.ToSingle(reader["frequencyGHz"]);
                            this.socketType = reader["socketType"] != DBNull.Value ? reader["socketType"].ToString() : null;
                        }
                        // else { MessageBox.Show($"No CPU found with name: {in_name}", "Not Found", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Database Error (Cpu.GetData): {ex.Message}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }
        public override string ToString()
        {
            return $"CPU: ID:{id}, Name:{name}, Brand:{brand}, Cores:{cores}, Freq:{frequencyGHz}GHz, Price:{price:C}, Sold:{soldCounter}";
        }
        public static string Compare(Cpu a, Cpu b)
        {
            if (a == null || b == null) return "Cannot compare: one or both objects are null.";
            StringBuilder sb = new StringBuilder();
            sb.AppendLine($"Comparing CPU: {a.name} vs {b.name}");
            if (a.brand != b.brand) sb.AppendLine($"Brand: {a.brand} vs {b.brand}");
            if (a.model != b.model) sb.AppendLine($"Model: {a.model} vs {b.model}");
            if (a.price != b.price) sb.AppendLine($"Price: {a.price:C} vs {b.price:C}");
            if (a.cores != b.cores) sb.AppendLine($"Cores: {a.cores} vs {b.cores}");
            if (a.frequencyGHz != b.frequencyGHz) sb.AppendLine($"Frequency: {a.frequencyGHz}GHz vs {b.frequencyGHz}GHz");
            if (a.socketType != b.socketType) sb.AppendLine($"Socket: {a.socketType} vs {b.socketType}");
            if (a.soldCounter != b.soldCounter) sb.AppendLine($"Sold Counter: {a.soldCounter} vs {b.soldCounter}");

            if (sb.Length == $"Comparing CPU: {a.name} vs {b.name}".Length + 2)
                return $"CPU {a.name} and {b.name} have no differences in compared properties.";
            return sb.ToString();
        }
    }

    public class Gpu : Electronics
    {
        public int memoryGB { get; set; }
        public string chipset { get; set; }

        // Constructor for new GPU
        public Gpu(
            string name, string brand, string model, string color, float price,
            string description, int quantity, byte[] image, string qrCode, int soldCounter,
            int memoryGB, string chipset)
            : base(name, brand, model, color, price, description, quantity, image, qrCode, soldCounter)
        { this.memoryGB = memoryGB; this.chipset = chipset; }

        // Constructor for existing GPU (from DB)
        public Gpu(
            string name, string brand, string model, string color, float price, int id,
            string description, int quantity, byte[] image, string qrCode, int soldCounter,
            int memoryGB, string chipset)
            : base(name, brand, model, color, price, id, description, quantity, image, qrCode, soldCounter)
        { this.memoryGB = memoryGB; this.chipset = chipset; }
        public Gpu() : base(null, null, null, null, 0, 0, null, 0, null, null) { }

        public override void SaveToDb(string connectionString)
        {
            string mergeQuery = @"
            MERGE INTO Gpus AS Target
            USING (SELECT @name AS name) AS Source ON Target.name = Source.name
            WHEN MATCHED THEN
                UPDATE SET brand=@brand, model=@model, color=@color, price=@price, description=@description,
                           quantity=@quantity, image=@image, QRCode=@QRCode, soldCounter=@soldCounter,
                           memoryGB=@memoryGB, chipset=@chipset
            WHEN NOT MATCHED THEN
                INSERT (name, brand, model, color, price, description, quantity, image, QRCode, soldCounter,
                        memoryGB, chipset)
                VALUES (@name, @brand, @model, @color, @price, @description, @quantity, @image, @QRCode, @soldCounter,
                        @memoryGB, @chipset);";
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(mergeQuery, conn))
            {
                cmd.Parameters.AddWithValue("@name", (object)name ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@brand", (object)brand ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@model", (object)model ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@color", (object)color ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@price", price);
                cmd.Parameters.AddWithValue("@description", (object)description ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@quantity", quantity);
                cmd.Parameters.AddWithValue("@image", (object)image ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@QRCode", (object)QRCode ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@soldCounter", soldCounter);
                cmd.Parameters.AddWithValue("@memoryGB", memoryGB);
                cmd.Parameters.AddWithValue("@chipset", (object)chipset ?? DBNull.Value);
                try
                {
                    conn.Open();
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Database Error (Gpu.SaveToDb): {ex.Message} \nQuery: {cmd.CommandText}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }
        public override void SaveToDbWithoutImage(string connectionString)
        {
            string mergeQueryNoImage = @"
            MERGE INTO Gpus AS Target
            USING (SELECT @name AS name) AS Source ON Target.name = Source.name
            WHEN MATCHED THEN
                UPDATE SET brand=@brand, model=@model, color=@color, price=@price, description=@description,
                           quantity=@quantity, QRCode=@QRCode, soldCounter=@soldCounter,
                           memoryGB=@memoryGB, chipset=@chipset
            WHEN NOT MATCHED THEN
                INSERT (name, brand, model, color, price, description, quantity, QRCode, soldCounter,
                        memoryGB, chipset)
                VALUES (@name, @brand, @model, @color, @price, @description, @quantity, @QRCode, @soldCounter,
                        @memoryGB, @chipset);";
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(mergeQueryNoImage, conn))
            {
                cmd.Parameters.AddWithValue("@name", (object)name ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@brand", (object)brand ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@model", (object)model ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@color", (object)color ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@price", price);
                cmd.Parameters.AddWithValue("@description", (object)description ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@quantity", quantity);
                cmd.Parameters.AddWithValue("@QRCode", (object)QRCode ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@soldCounter", soldCounter);
                cmd.Parameters.AddWithValue("@memoryGB", memoryGB);
                cmd.Parameters.AddWithValue("@chipset", (object)chipset ?? DBNull.Value);
                try
                {
                    conn.Open();
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Database Error (Gpu.SaveToDbWithoutImage): {ex.Message} \nQuery: {cmd.CommandText}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }
        public override void GetData(string in_name, string connectionString)
        {
            string selectQuery = "SELECT * FROM Gpus WHERE name = @name";
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(selectQuery, conn))
            {
                cmd.Parameters.AddWithValue("@name", in_name);
                try
                {
                    conn.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            this.id = Convert.ToInt32(reader["id"]); // PK
                            this.name = reader["name"].ToString();
                            this.brand = reader["brand"].ToString();
                            this.model = reader["model"].ToString();
                            this.color = reader["color"].ToString();
                            this.price = Convert.ToSingle(reader["price"]);
                            this.description = reader["description"] != DBNull.Value ? reader["description"].ToString() : null;
                            this.quantity = Convert.ToInt32(reader["quantity"]);
                            this.image = reader["image"] != DBNull.Value ? (byte[])reader["image"] : null;
                            this.QRCode = reader["QRCode"].ToString();
                            this.soldCounter = reader["soldCounter"] != DBNull.Value ? Convert.ToInt32(reader["soldCounter"]) : 0;
                            this.memoryGB = Convert.ToInt32(reader["memoryGB"]);
                            this.chipset = reader["chipset"] != DBNull.Value ? reader["chipset"].ToString() : null;
                        }
                        // else { MessageBox.Show($"No GPU found with name: {in_name}", "Not Found", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Database Error (Gpu.GetData): {ex.Message}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }
        public override string ToString()
        {
            return $"GPU: ID:{id}, Name:{name}, Brand:{brand}, Memory:{memoryGB}GB, Chipset:{chipset}, Price:{price:C}, Sold:{soldCounter}";
        }
        public static string Compare(Gpu a, Gpu b)
        {
            if (a == null || b == null) return "Cannot compare: one or both objects are null.";
            StringBuilder sb = new StringBuilder();
            sb.AppendLine($"Comparing GPU: {a.name} vs {b.name}");
            if (a.brand != b.brand) sb.AppendLine($"Brand: {a.brand} vs {b.brand}");
            if (a.model != b.model) sb.AppendLine($"Model: {a.model} vs {b.model}");
            if (a.price != b.price) sb.AppendLine($"Price: {a.price:C} vs {b.price:C}");
            if (a.memoryGB != b.memoryGB) sb.AppendLine($"Memory: {a.memoryGB}GB vs {b.memoryGB}GB");
            if (a.chipset != b.chipset) sb.AppendLine($"Chipset: {a.chipset} vs {b.chipset}");
            if (a.soldCounter != b.soldCounter) sb.AppendLine($"Sold Counter: {a.soldCounter} vs {b.soldCounter}");

            if (sb.Length == $"Comparing GPU: {a.name} vs {b.name}".Length + 2)
                return $"GPU {a.name} and {b.name} have no differences in compared properties.";
            return sb.ToString();
        }
    }
}