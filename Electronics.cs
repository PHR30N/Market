using System;
using System.Data.SqlClient;
using System.Text;
using System.Windows.Forms; // Required for MessageBox
// using System.Collections.Generic; // Not strictly used by the classes themselves in this version

namespace Market
{
    // Example connection string (replace with your actual connection string)
    // string connectionString = "Data Source=localhost;Initial Catalog=MarketDB;Integrated Security=True;TrustServerCertificate=True";

    public abstract class Electronics
    {
        public string name { get; set; }
        public string brand { get; set; }
        public string model { get; set; }
        public string color { get; set; }
        public float price { get; set; }
        public int id { get; protected set; } // Setter is protected: only this class or derived classes can set it.
                                              // Primarily set by GetData or the constructor for existing items.
        public string description { get; set; }
        public int quantity { get; set; }
        public byte[] image { get; set; }
        public string QRCode { get; set; }
        public int soldCounter { get; set; }

        // Constructor for NEW items (ID will be generated by DB, C# object's id remains 0 or default)
        protected Electronics(string name, string brand, string model, string color, float price, string description, int quantity, byte[] image, string qrCode, int soldCounter = 0)
        {
            this.name = name;
            this.brand = brand;
            this.model = model;
            this.color = color;
            this.price = price;
            this.description = description;
            this.quantity = quantity;
            this.image = image;
            this.QRCode = qrCode;
            this.soldCounter = soldCounter;
            // this.id remains 0 (default int value). The database handles ID generation.
        }

        // Constructor for items FETCHED from DB (ID is known and provided)
        protected Electronics(string name, string brand, string model, string color, float price, int id, string description, int quantity, byte[] image, string qrCode, int soldCounter = 0)
        {
            this.name = name;
            this.brand = brand;
            this.model = model;
            this.color = color;
            this.id = id; // ID is set here because it's an existing item from the DB.
            this.price = price;
            this.description = description;
            this.quantity = quantity;
            this.image = image;
            this.QRCode = qrCode;
            this.soldCounter = soldCounter;
        }

        // Parameterless constructor for derived classes, C# object's id remains 0 or default.
        protected Electronics() { }


        // Abstract save methods: ID is NOT passed as a parameter.
        // The database handles ID generation for new records.
        // The MERGE statement handles insert/update based on 'name'.
        public abstract void SaveToDb(string connectionString);
        public abstract void SaveToDbWithoutImage(string connectionString);

        // Abstract method to get data (which includes fetching the ID).
        public abstract void GetData(string in_name, string connectionString);

        // ToString remains abstract.
        public abstract override string ToString();

        // Helper to explicitly set ID, typically used by GetData or if manually hydrating.
        // This can be used by derived classes in their GetData implementations.
        protected void SetObjectId(int databaseId)
        {
            this.id = databaseId;
        }
    }

    public class Phone : Electronics
    {
        public string operatingSystem { get; set; }
        public float screenSize { get; set; }
        public int storageCapacity { get; set; }
        public int ramSize { get; set; }
        public int cameraQuality { get; set; }
        public string cpuType { get; set; }
        public int batteryCapacity { get; set; }
        public bool tablet { get; set; }

        // Constructor for new Phone (no id parameter)
        public Phone(
            string name, string brand, string model, string color, float price,
            string description, int quantity, byte[] image, string qrCode,
            string operatingSystem, float screenSize, int storageCapacity, int ramSize,
            int cameraQuality, string cpuType, int batteryCapacity, bool tablet, int soldCounter = 0)
            : base(name, brand, model, color, price, description, quantity, image, qrCode, soldCounter)
        {
            this.operatingSystem = operatingSystem;
            this.screenSize = screenSize;
            this.storageCapacity = storageCapacity;
            this.ramSize = ramSize;
            this.cameraQuality = cameraQuality;
            this.cpuType = cpuType;
            this.batteryCapacity = batteryCapacity;
            this.tablet = tablet;
        }

        // Constructor for existing Phone (from DB, with id parameter)
        public Phone(
            string name, string brand, string model, string color, float price, int id,
            string description, int quantity, byte[] image, string qrCode,
            string operatingSystem, float screenSize, int storageCapacity, int ramSize,
            int cameraQuality, string cpuType, int batteryCapacity, bool tablet, int soldCounter = 0)
            : base(name, brand, model, color, price, id, description, quantity, image, qrCode, soldCounter)
        {
            this.operatingSystem = operatingSystem;
            this.screenSize = screenSize;
            this.storageCapacity = storageCapacity;
            this.ramSize = ramSize;
            this.cameraQuality = cameraQuality;
            this.cpuType = cpuType;
            this.batteryCapacity = batteryCapacity;
            this.tablet = tablet;
        }

        // Parameterless constructor
        public Phone() : base() { }

        public override void SaveToDb(string connectionString)
        {
            // ID is NOT included in INSERT columns or VALUES for new items.
            // ID is NOT updated in the UPDATE SET clause for existing items.
            string mergeQuery = @"
            MERGE INTO Phones AS Target
            USING (SELECT @name AS name) AS Source
            ON Target.name = Source.name
            WHEN MATCHED THEN
                UPDATE SET
                    brand = @brand, model = @model, color = @color, price = @price,
                    description = @description, quantity = @quantity, image = @image, QRCode = @QRCode,
                    soldCounter = @soldCounter, operatingSystem = @operatingSystem, screenSize = @screenSize,
                    storageCapacity = @storageCapacity, ramSize = @ramSize, cameraQuality = @cameraQuality,
                    cpuType = @cpuType, batteryCapacity = @batteryCapacity, tablet = @tablet
            WHEN NOT MATCHED THEN
                INSERT (name, brand, model, color, price, description, quantity, image, QRCode, operatingSystem, screenSize, storageCapacity, ramSize, cameraQuality, cpuType, batteryCapacity, tablet, soldCounter)
                VALUES (@name, @brand, @model, @color, @price, @description, @quantity, @image, @QRCode, @operatingSystem, @screenSize, @storageCapacity, @ramSize, @cameraQuality, @cpuType, @batteryCapacity, @tablet, @soldCounter);";

            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(mergeQuery, conn))
            {
                cmd.Parameters.AddWithValue("@name", (object)name ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@brand", (object)brand ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@model", (object)model ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@color", (object)color ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@price", price);
                cmd.Parameters.AddWithValue("@description", (object)description ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@quantity", quantity);
                cmd.Parameters.AddWithValue("@image", (object)image ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@QRCode", (object)QRCode ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@soldCounter", soldCounter);
                cmd.Parameters.AddWithValue("@operatingSystem", (object)operatingSystem ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@screenSize", screenSize);
                cmd.Parameters.AddWithValue("@storageCapacity", storageCapacity);
                cmd.Parameters.AddWithValue("@ramSize", ramSize);
                cmd.Parameters.AddWithValue("@cameraQuality", cameraQuality);
                cmd.Parameters.AddWithValue("@cpuType", (object)cpuType ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@batteryCapacity", batteryCapacity);
                cmd.Parameters.AddWithValue("@tablet", tablet);
                // NO @id parameter is added or used in the SQL for setting the ID column.

                try
                {
                    conn.Open();
                    cmd.ExecuteNonQuery();
                    // If you wanted to get the ID of a newly inserted item, you'd add "OUTPUT inserted.id" to the MERGE
                    // and use cmd.ExecuteScalar(), then call this.SetObjectId().
                    MessageBox.Show($"{this.GetType().Name} '{this.name}' saved successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Database Error (Phone.SaveToDb): {ex.Message} \nQuery: {cmd.CommandText}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }
        public override void SaveToDbWithoutImage(string connectionString)
        {
            string mergeQuery = @"
            MERGE INTO Phones AS Target
            USING (SELECT @name AS name) AS Source
            ON Target.name = Source.name
            WHEN MATCHED THEN
                UPDATE SET
                    brand = @brand, model = @model, color = @color, price = @price,
                    description = @description, quantity = @quantity, QRCode = @QRCode,
                    soldCounter = @soldCounter, operatingSystem = @operatingSystem, screenSize = @screenSize,
                    storageCapacity = @storageCapacity, ramSize = @ramSize, cameraQuality = @cameraQuality,
                    cpuType = @cpuType, batteryCapacity = @batteryCapacity, tablet = @tablet
            WHEN NOT MATCHED THEN
                INSERT (name, brand, model, color, price, description, quantity, QRCode, operatingSystem, screenSize, storageCapacity, ramSize, cameraQuality, cpuType, batteryCapacity, tablet, soldCounter)
                VALUES (@name, @brand, @model, @color, @price, @description, @quantity, @QRCode, @operatingSystem, @screenSize, @storageCapacity, @ramSize, @cameraQuality, @cpuType, @batteryCapacity, @tablet, @soldCounter);";

            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(mergeQuery, conn))
            {
                cmd.Parameters.AddWithValue("@name", (object)name ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@brand", (object)brand ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@model", (object)model ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@color", (object)color ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@price", price);
                cmd.Parameters.AddWithValue("@description", (object)description ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@quantity", quantity);
                // No @image parameter
                cmd.Parameters.AddWithValue("@QRCode", (object)QRCode ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@soldCounter", soldCounter);
                cmd.Parameters.AddWithValue("@operatingSystem", (object)operatingSystem ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@screenSize", screenSize);
                cmd.Parameters.AddWithValue("@storageCapacity", storageCapacity);
                cmd.Parameters.AddWithValue("@ramSize", ramSize);
                cmd.Parameters.AddWithValue("@cameraQuality", cameraQuality);
                cmd.Parameters.AddWithValue("@cpuType", (object)cpuType ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@batteryCapacity", batteryCapacity);
                cmd.Parameters.AddWithValue("@tablet", tablet);

                try
                {
                    conn.Open();
                    cmd.ExecuteNonQuery();
                    MessageBox.Show($"{this.GetType().Name} '{this.name}' (no image) saved successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Database Error (Phone.SaveToDbWithoutImage): {ex.Message} \nQuery: {cmd.CommandText}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        public override void GetData(string in_name, string connectionString)
        {
            string selectQuery = "SELECT * FROM Phones WHERE name = @name";
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(selectQuery, conn))
            {
                cmd.Parameters.AddWithValue("@name", in_name);
                try
                {
                    conn.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            this.SetObjectId(Convert.ToInt32(reader["id"])); // Use helper to set ID
                            this.name = reader["name"].ToString();
                            this.brand = reader["brand"].ToString();
                            this.model = reader["model"].ToString();
                            this.color = reader["color"].ToString();
                            this.price = Convert.ToSingle(reader["price"]);
                            this.description = reader["description"] != DBNull.Value ? reader["description"].ToString() : null;
                            this.quantity = Convert.ToInt32(reader["quantity"]);
                            this.image = reader["image"] != DBNull.Value ? (byte[])reader["image"] : null;
                            this.QRCode = reader["QRCode"].ToString();
                            this.soldCounter = reader["soldCounter"] != DBNull.Value ? Convert.ToInt32(reader["soldCounter"]) : 0;
                            this.operatingSystem = reader["operatingSystem"] != DBNull.Value ? reader["operatingSystem"].ToString() : null;
                            this.screenSize = Convert.ToSingle(reader["screenSize"]);
                            this.storageCapacity = Convert.ToInt32(reader["storageCapacity"]);
                            this.ramSize = Convert.ToInt32(reader["ramSize"]);
                            this.cameraQuality = Convert.ToInt32(reader["cameraQuality"]);
                            this.cpuType = reader["cpuType"] != DBNull.Value ? reader["cpuType"].ToString() : null;
                            this.batteryCapacity = Convert.ToInt32(reader["batteryCapacity"]);
                            this.tablet = Convert.ToBoolean(reader["tablet"]);
                        }
                    }
                }
                catch (Exception ex) { MessageBox.Show($"Database Error (Phone.GetData): {ex.Message}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
            }
        }
        public override string ToString()
        {
            return $"Phone: ID:{id}, Name:{name}, Brand:{brand}, Model:{model}, Price:{price:C}, Tablet:{tablet}, Sold:{soldCounter}";
        }
        public static string Compare(Phone a, Phone b)
        {
            if (a == null || b == null) return "Cannot compare: one or both objects are null.";
            StringBuilder sb = new StringBuilder();
            sb.AppendLine($"Comparing Phone: {(a.name ?? "N/A")} vs {(b.name ?? "N/A")}");
            if (!Equals(a.brand, b.brand)) sb.AppendLine($"Brand: {(a.brand ?? "N/A")} vs {(b.brand ?? "N/A")}");
            if (!Equals(a.model, b.model)) sb.AppendLine($"Model: {(a.model ?? "N/A")} vs {(b.model ?? "N/A")}");
            if (a.price != b.price) sb.AppendLine($"Price: {a.price:C} vs {b.price:C}");
            if (!Equals(a.operatingSystem, b.operatingSystem)) sb.AppendLine($"OS: {(a.operatingSystem ?? "N/A")} vs {(b.operatingSystem ?? "N/A")}");
            if (a.screenSize != b.screenSize) sb.AppendLine($"Screen Size: {a.screenSize}\" vs {b.screenSize}\"");
            if (a.storageCapacity != b.storageCapacity) sb.AppendLine($"Storage: {a.storageCapacity}GB vs {b.storageCapacity}GB");
            if (a.ramSize != b.ramSize) sb.AppendLine($"RAM: {a.ramSize}GB vs {b.ramSize}GB");
            if (a.cameraQuality != b.cameraQuality) sb.AppendLine($"Camera: {a.cameraQuality}MP vs {b.cameraQuality}MP");
            if (!Equals(a.cpuType, b.cpuType)) sb.AppendLine($"CPU: {(a.cpuType ?? "N/A")} vs {(b.cpuType ?? "N/A")}");
            if (a.batteryCapacity != b.batteryCapacity) sb.AppendLine($"Battery: {a.batteryCapacity}mAh vs {b.batteryCapacity}mAh");
            if (a.tablet != b.tablet) sb.AppendLine($"Tablet: {a.tablet} vs {b.tablet}");
            if (a.soldCounter != b.soldCounter) sb.AppendLine($"Sold Counter: {a.soldCounter} vs {b.soldCounter}");

            string result = sb.ToString();
            if (result.TrimEnd() == $"Comparing Phone: {(a.name ?? "N/A")} vs {(b.name ?? "N/A")}")
                return $"Phone {(a.name ?? "N/A")} and {(b.name ?? "N/A")} have no differences in compared properties.";
            return result.TrimEnd();
        }
    }

    public class Fold : Phone
    {
        public string foldType { get; set; }
        public string hingeMaterial { get; set; }
        public string displayType { get; set; }
        public string durabilityRating { get; set; }
        public float sizeOfOpenedScreen { get; set; }

        public Fold(
            string name, string brand, string model, string color, float price,
            string description, int quantity, byte[] image, string qrCode,
            string operatingSystem, float screenSize, int storageCapacity, int ramSize,
            int cameraQuality, string cpuType, int batteryCapacity, bool tablet, int soldCounter,
            string foldType, string hingeMaterial, string displayType, string durabilityRating, float sizeOfOpenedScreen)
            : base(name, brand, model, color, price, description, quantity, image, qrCode,
                  operatingSystem, screenSize, storageCapacity, ramSize, cameraQuality, cpuType, batteryCapacity, tablet, soldCounter)
        {
            this.foldType = foldType; this.hingeMaterial = hingeMaterial; this.displayType = displayType;
            this.durabilityRating = durabilityRating; this.sizeOfOpenedScreen = sizeOfOpenedScreen;
        }
        public Fold(
            string name, string brand, string model, string color, float price, int id,
            string description, int quantity, byte[] image, string qrCode,
            string operatingSystem, float screenSize, int storageCapacity, int ramSize,
            int cameraQuality, string cpuType, int batteryCapacity, bool tablet, int soldCounter,
            string foldType, string hingeMaterial, string displayType, string durabilityRating, float sizeOfOpenedScreen)
            : base(name, brand, model, color, price, id, description, quantity, image, qrCode,
                  operatingSystem, screenSize, storageCapacity, ramSize, cameraQuality, cpuType, batteryCapacity, tablet, soldCounter)
        {
            this.foldType = foldType; this.hingeMaterial = hingeMaterial; this.displayType = displayType;
            this.durabilityRating = durabilityRating; this.sizeOfOpenedScreen = sizeOfOpenedScreen;
        }
        public Fold() : base() { }

        public override void SaveToDb(string connectionString)
        {
            string mergeQuery = @"
            MERGE INTO Folds AS Target
            USING (SELECT @name AS name) AS Source ON Target.name = Source.name
            WHEN MATCHED THEN
                UPDATE SET brand=@brand, model=@model, color=@color, price=@price, description=@description, quantity=@quantity, image=@image, QRCode=@QRCode,
                           operatingSystem=@operatingSystem, screenSize=@screenSize, storageCapacity=@storageCapacity, ramSize=@ramSize, cameraQuality=@cameraQuality,
                           cpuType=@cpuType, batteryCapacity=@batteryCapacity, tablet=@tablet, soldCounter=@soldCounter, foldType=@foldType,
                           hingeMaterial=@hingeMaterial, displayType=@displayType, durabilityRating=@durabilityRating, sizeOfOpenedScreen=@sizeOfOpenedScreen
            WHEN NOT MATCHED THEN
                INSERT (name, brand, model, color, price, description, quantity, image, QRCode, operatingSystem, screenSize, storageCapacity, ramSize,
                        cameraQuality, cpuType, batteryCapacity, tablet, soldCounter, foldType, hingeMaterial, displayType, durabilityRating, sizeOfOpenedScreen)
                VALUES (@name, @brand, @model, @color, @price, @description, @quantity, @image, @QRCode, @operatingSystem, @screenSize, @storageCapacity, @ramSize,
                        @cameraQuality, @cpuType, @batteryCapacity, @tablet, @soldCounter, @foldType, @hingeMaterial, @displayType, @durabilityRating, @sizeOfOpenedScreen);";
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(mergeQuery, conn))
            {
                cmd.Parameters.AddWithValue("@name", (object)name ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@brand", (object)brand ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@model", (object)model ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@color", (object)color ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@price", price);
                cmd.Parameters.AddWithValue("@description", (object)description ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@quantity", quantity);
                cmd.Parameters.AddWithValue("@image", (object)image ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@QRCode", (object)QRCode ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@operatingSystem", (object)operatingSystem ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@screenSize", screenSize);
                cmd.Parameters.AddWithValue("@storageCapacity", storageCapacity);
                cmd.Parameters.AddWithValue("@ramSize", ramSize);
                cmd.Parameters.AddWithValue("@cameraQuality", cameraQuality);
                cmd.Parameters.AddWithValue("@cpuType", (object)cpuType ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@batteryCapacity", batteryCapacity);
                cmd.Parameters.AddWithValue("@tablet", tablet);
                cmd.Parameters.AddWithValue("@soldCounter", soldCounter);
                cmd.Parameters.AddWithValue("@foldType", (object)foldType ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@hingeMaterial", (object)hingeMaterial ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@displayType", (object)displayType ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@durabilityRating", (object)durabilityRating ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@sizeOfOpenedScreen", sizeOfOpenedScreen);
                try { conn.Open(); cmd.ExecuteNonQuery(); MessageBox.Show($"{this.GetType().Name} '{this.name}' saved successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                catch (Exception ex) { MessageBox.Show($"Database Error (Fold.SaveToDb): {ex.Message} \nQuery: {cmd.CommandText}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
            }
        }
        public override void SaveToDbWithoutImage(string connectionString)
        {
            string mergeQueryNoImage = @"
            MERGE INTO Folds AS Target
            USING (SELECT @name AS name) AS Source ON Target.name = Source.name
            WHEN MATCHED THEN
                UPDATE SET brand=@brand, model=@model, color=@color, price=@price, description=@description, quantity=@quantity, QRCode=@QRCode,
                           operatingSystem=@operatingSystem, screenSize=@screenSize, storageCapacity=@storageCapacity, ramSize=@ramSize, cameraQuality=@cameraQuality,
                           cpuType=@cpuType, batteryCapacity=@batteryCapacity, tablet=@tablet, soldCounter=@soldCounter, foldType=@foldType,
                           hingeMaterial=@hingeMaterial, displayType=@displayType, durabilityRating=@durabilityRating, sizeOfOpenedScreen=@sizeOfOpenedScreen
            WHEN NOT MATCHED THEN
                INSERT (name, brand, model, color, price, description, quantity, QRCode, operatingSystem, screenSize, storageCapacity, ramSize,
                        cameraQuality, cpuType, batteryCapacity, tablet, soldCounter, foldType, hingeMaterial, displayType, durabilityRating, sizeOfOpenedScreen)
                VALUES (@name, @brand, @model, @color, @price, @description, @quantity, @QRCode, @operatingSystem, @screenSize, @storageCapacity, @ramSize,
                        @cameraQuality, @cpuType, @batteryCapacity, @tablet, @soldCounter, @foldType, @hingeMaterial, @displayType, @durabilityRating, @sizeOfOpenedScreen);";
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(mergeQueryNoImage, conn))
            {
                cmd.Parameters.AddWithValue("@name", (object)name ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@brand", (object)brand ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@model", (object)model ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@color", (object)color ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@price", price);
                cmd.Parameters.AddWithValue("@description", (object)description ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@quantity", quantity);
                cmd.Parameters.AddWithValue("@QRCode", (object)QRCode ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@operatingSystem", (object)operatingSystem ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@screenSize", screenSize);
                cmd.Parameters.AddWithValue("@storageCapacity", storageCapacity);
                cmd.Parameters.AddWithValue("@ramSize", ramSize);
                cmd.Parameters.AddWithValue("@cameraQuality", cameraQuality);
                cmd.Parameters.AddWithValue("@cpuType", (object)cpuType ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@batteryCapacity", batteryCapacity);
                cmd.Parameters.AddWithValue("@tablet", tablet);
                cmd.Parameters.AddWithValue("@soldCounter", soldCounter);
                cmd.Parameters.AddWithValue("@foldType", (object)foldType ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@hingeMaterial", (object)hingeMaterial ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@displayType", (object)displayType ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@durabilityRating", (object)durabilityRating ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@sizeOfOpenedScreen", sizeOfOpenedScreen);
                try { conn.Open(); cmd.ExecuteNonQuery(); MessageBox.Show($"{this.GetType().Name} '{this.name}' (no image) saved successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                catch (Exception ex) { MessageBox.Show($"Database Error (Fold.SaveToDbWithoutImage): {ex.Message} \nQuery: {cmd.CommandText}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
            }
        }
        public override void GetData(string in_name, string connectionString)
        {
            string selectQuery = "SELECT * FROM Folds WHERE name = @name";
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(selectQuery, conn))
            {
                cmd.Parameters.AddWithValue("@name", in_name);
                try
                {
                    conn.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            this.SetObjectId(Convert.ToInt32(reader["id"]));
                            this.name = reader["name"].ToString();
                            this.brand = reader["brand"].ToString();
                            this.model = reader["model"].ToString();
                            this.color = reader["color"].ToString();
                            this.price = Convert.ToSingle(reader["price"]);
                            this.description = reader["description"] != DBNull.Value ? reader["description"].ToString() : null;
                            this.quantity = Convert.ToInt32(reader["quantity"]);
                            this.image = reader["image"] != DBNull.Value ? (byte[])reader["image"] : null;
                            this.QRCode = reader["QRCode"].ToString();
                            this.soldCounter = reader["soldCounter"] != DBNull.Value ? Convert.ToInt32(reader["soldCounter"]) : 0;
                            this.operatingSystem = reader["operatingSystem"] != DBNull.Value ? reader["operatingSystem"].ToString() : null;
                            this.screenSize = Convert.ToSingle(reader["screenSize"]);
                            this.storageCapacity = Convert.ToInt32(reader["storageCapacity"]);
                            this.ramSize = Convert.ToInt32(reader["ramSize"]);
                            this.cameraQuality = Convert.ToInt32(reader["cameraQuality"]);
                            this.cpuType = reader["cpuType"] != DBNull.Value ? reader["cpuType"].ToString() : null;
                            this.batteryCapacity = Convert.ToInt32(reader["batteryCapacity"]);
                            this.tablet = Convert.ToBoolean(reader["tablet"]);
                            this.foldType = reader["foldType"] != DBNull.Value ? reader["foldType"].ToString() : null;
                            this.hingeMaterial = reader["hingeMaterial"] != DBNull.Value ? reader["hingeMaterial"].ToString() : null;
                            this.displayType = reader["displayType"] != DBNull.Value ? reader["displayType"].ToString() : null;
                            this.durabilityRating = reader["durabilityRating"] != DBNull.Value ? reader["durabilityRating"].ToString() : null;
                            this.sizeOfOpenedScreen = Convert.ToSingle(reader["sizeOfOpenedScreen"]);
                        }
                    }
                }
                catch (Exception ex) { MessageBox.Show($"Database Error (Fold.GetData): {ex.Message}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
            }
        }
        public override string ToString()
        {
            return $"Fold: ID:{id}, Name:{name}, Brand:{brand}, Price:{price:C}, Opened Screen: {sizeOfOpenedScreen}\", Sold:{soldCounter}";
        }
        public static string Compare(Fold a, Fold b)
        {
            if (a == null || b == null) return "Cannot compare: one or both objects are null.";
            string phoneComparison = Phone.Compare(a, b);
            StringBuilder sb = new StringBuilder();
            bool phoneDifferencesFound = !phoneComparison.Contains("have no differences in compared properties");

            if (phoneDifferencesFound) { sb.Append(phoneComparison); if (!phoneComparison.EndsWith(Environment.NewLine)) sb.AppendLine(); }
            else { sb.AppendLine($"Comparing Fold: {(a.name ?? "N/A")} vs {(b.name ?? "N/A")}"); }

            bool foldDifferences = false;
            if (!Equals(a.foldType, b.foldType)) { sb.AppendLine($"Fold Type: {(a.foldType ?? "N/A")} vs {(b.foldType ?? "N/A")}"); foldDifferences = true; }
            if (!Equals(a.hingeMaterial, b.hingeMaterial)) { sb.AppendLine($"Hinge Material: {(a.hingeMaterial ?? "N/A")} vs {(b.hingeMaterial ?? "N/A")}"); foldDifferences = true; }
            if (!Equals(a.displayType, b.displayType)) { sb.AppendLine($"Display Type: {(a.displayType ?? "N/A")} vs {(b.displayType ?? "N/A")}"); foldDifferences = true; }
            if (!Equals(a.durabilityRating, b.durabilityRating)) { sb.AppendLine($"Durability: {(a.durabilityRating ?? "N/A")} vs {(b.durabilityRating ?? "N/A")}"); foldDifferences = true; }
            if (a.sizeOfOpenedScreen != b.sizeOfOpenedScreen) { sb.AppendLine($"Opened Screen Size: {a.sizeOfOpenedScreen}\" vs {b.sizeOfOpenedScreen}\""); foldDifferences = true; }

            if (!phoneDifferencesFound && !foldDifferences) return $"Fold {(a.name ?? "N/A")} and {(b.name ?? "N/A")} have no differences in compared properties.";
            if (phoneDifferencesFound && !foldDifferences && sb.ToString().TrimEnd() == phoneComparison.TrimEnd()) return phoneComparison; // Only phone diffs

            return sb.ToString().TrimEnd();
        }
    }

    public class Laptop : Electronics
    {
        public string operatingSystem { get; set; }
        public int storageCapacity { get; set; }
        public int ramSize { get; set; }
        public string graphicsCard { get; set; }
        public string cpuType { get; set; }
        public float screenSize { get; set; }
        public string batteryLife { get; set; }

        public Laptop(
            string name, string brand, string model, string color, float price,
            string description, int quantity, byte[] image, string qrCode, int soldCounter,
            string operatingSystem, int storageCapacity, int ramSize, string graphicsCard,
            string cpuType, float screenSize, string batteryLife)
            : base(name, brand, model, color, price, description, quantity, image, qrCode, soldCounter)
        {
            this.operatingSystem = operatingSystem; this.storageCapacity = storageCapacity; this.ramSize = ramSize;
            this.graphicsCard = graphicsCard; this.cpuType = cpuType; this.screenSize = screenSize; this.batteryLife = batteryLife;
        }
        public Laptop(
            string name, string brand, string model, string color, float price, int id,
            string description, int quantity, byte[] image, string qrCode, int soldCounter,
            string operatingSystem, int storageCapacity, int ramSize, string graphicsCard,
            string cpuType, float screenSize, string batteryLife)
            : base(name, brand, model, color, price, id, description, quantity, image, qrCode, soldCounter)
        {
            this.operatingSystem = operatingSystem; this.storageCapacity = storageCapacity; this.ramSize = ramSize;
            this.graphicsCard = graphicsCard; this.cpuType = cpuType; this.screenSize = screenSize; this.batteryLife = batteryLife;
        }
        public Laptop() : base() { }

        public override void SaveToDb(string connectionString)
        {
            string mergeQuery = @"
            MERGE INTO Laptops AS Target
            USING (SELECT @name AS name) AS Source ON Target.name = Source.name
            WHEN MATCHED THEN
                UPDATE SET brand=@brand, model=@model, color=@color, price=@price, description=@description, quantity=@quantity, image=@image, QRCode=@QRCode,
                           operatingSystem=@operatingSystem, storageCapacity=@storageCapacity, ramSize=@ramSize, graphicsCard=@graphicsCard,
                           cpuType=@cpuType, screenSize=@screenSize, batteryLife=@batteryLife, soldCounter=@soldCounter
            WHEN NOT MATCHED THEN
                INSERT (name, brand, model, color, price, description, quantity, image, QRCode, operatingSystem, storageCapacity, ramSize,
                        graphicsCard, cpuType, screenSize, batteryLife, soldCounter)
                VALUES (@name, @brand, @model, @color, @price, @description, @quantity, @image, @QRCode, @operatingSystem, @storageCapacity, @ramSize,
                        @graphicsCard, @cpuType, @screenSize, @batteryLife, @soldCounter);";
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(mergeQuery, conn))
            {
                cmd.Parameters.AddWithValue("@name", (object)name ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@brand", (object)brand ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@model", (object)model ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@color", (object)color ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@price", price);
                cmd.Parameters.AddWithValue("@description", (object)description ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@quantity", quantity);
                cmd.Parameters.AddWithValue("@image", (object)image ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@QRCode", (object)QRCode ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@soldCounter", soldCounter);
                cmd.Parameters.AddWithValue("@operatingSystem", (object)operatingSystem ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@storageCapacity", storageCapacity);
                cmd.Parameters.AddWithValue("@ramSize", ramSize);
                cmd.Parameters.AddWithValue("@graphicsCard", (object)graphicsCard ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@cpuType", (object)cpuType ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@screenSize", screenSize);
                cmd.Parameters.AddWithValue("@batteryLife", (object)batteryLife ?? DBNull.Value);
                try { conn.Open(); cmd.ExecuteNonQuery(); MessageBox.Show($"{this.GetType().Name} '{this.name}' saved successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                catch (Exception ex) { MessageBox.Show($"Database Error (Laptop.SaveToDb): {ex.Message} \nQuery: {cmd.CommandText}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
            }
        }
        public override void SaveToDbWithoutImage(string connectionString)
        {
            string mergeQueryNoImage = @"
            MERGE INTO Laptops AS Target
            USING (SELECT @name AS name) AS Source ON Target.name = Source.name
            WHEN MATCHED THEN
                UPDATE SET brand=@brand, model=@model, color=@color, price=@price, description=@description, quantity=@quantity, QRCode=@QRCode,
                           operatingSystem=@operatingSystem, storageCapacity=@storageCapacity, ramSize=@ramSize, graphicsCard=@graphicsCard,
                           cpuType=@cpuType, screenSize=@screenSize, batteryLife=@batteryLife, soldCounter=@soldCounter
            WHEN NOT MATCHED THEN
                INSERT (name, brand, model, color, price, description, quantity, QRCode, operatingSystem, storageCapacity, ramSize,
                        graphicsCard, cpuType, screenSize, batteryLife, soldCounter)
                VALUES (@name, @brand, @model, @color, @price, @description, @quantity, @QRCode, @operatingSystem, @storageCapacity, @ramSize,
                        @graphicsCard, @cpuType, @screenSize, @batteryLife, @soldCounter);";
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(mergeQueryNoImage, conn))
            {
                cmd.Parameters.AddWithValue("@name", (object)name ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@brand", (object)brand ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@model", (object)model ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@color", (object)color ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@price", price);
                cmd.Parameters.AddWithValue("@description", (object)description ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@quantity", quantity);
                cmd.Parameters.AddWithValue("@QRCode", (object)QRCode ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@soldCounter", soldCounter);
                cmd.Parameters.AddWithValue("@operatingSystem", (object)operatingSystem ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@storageCapacity", storageCapacity);
                cmd.Parameters.AddWithValue("@ramSize", ramSize);
                cmd.Parameters.AddWithValue("@graphicsCard", (object)graphicsCard ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@cpuType", (object)cpuType ?? DBNull.Value);
                cmd.Parameters.AddWithValue("@screenSize", screenSize);
                cmd.Parameters.AddWithValue("@batteryLife", (object)batteryLife ?? DBNull.Value);
                try { conn.Open(); cmd.ExecuteNonQuery(); MessageBox.Show($"{this.GetType().Name} '{this.name}' (no image) saved successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                catch (Exception ex) { MessageBox.Show($"Database Error (Laptop.SaveToDbWithoutImage): {ex.Message} \nQuery: {cmd.CommandText}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
            }
        }
        public override void GetData(string in_name, string connectionString)
        {
            string idColumnNameToUse = "id"; string specificIdColName = "laptop_id";
            string selectQuery = $"SELECT * FROM Laptops WHERE name = @name";
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(selectQuery, conn))
            {
                cmd.Parameters.AddWithValue("@name", in_name);
                try
                {
                    conn.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            bool specificIdColumnExists = false;
                            for (int i = 0; i < reader.FieldCount; i++) { if (reader.GetName(i).Equals(specificIdColName, StringComparison.OrdinalIgnoreCase)) { specificIdColumnExists = true; break; } }
                            idColumnNameToUse = specificIdColumnExists ? specificIdColName : "id";
                            this.SetObjectId(Convert.ToInt32(reader[idColumnNameToUse]));
                            this.name = reader["name"].ToString(); this.brand = reader["brand"].ToString(); this.model = reader["model"].ToString(); this.color = reader["color"].ToString();
                            this.price = Convert.ToSingle(reader["price"]); this.description = reader["description"] != DBNull.Value ? reader["description"].ToString() : null;
                            this.quantity = Convert.ToInt32(reader["quantity"]); this.image = reader["image"] != DBNull.Value ? (byte[])reader["image"] : null;
                            this.QRCode = reader["QRCode"].ToString(); this.soldCounter = reader["soldCounter"] != DBNull.Value ? Convert.ToInt32(reader["soldCounter"]) : 0;
                            this.operatingSystem = reader["operatingSystem"] != DBNull.Value ? reader["operatingSystem"].ToString() : null;
                            this.storageCapacity = Convert.ToInt32(reader["storageCapacity"]); this.ramSize = Convert.ToInt32(reader["ramSize"]);
                            this.graphicsCard = reader["graphicsCard"] != DBNull.Value ? reader["graphicsCard"].ToString() : null;
                            this.cpuType = reader["cpuType"] != DBNull.Value ? reader["cpuType"].ToString() : null;
                            this.screenSize = Convert.ToSingle(reader["screenSize"]); this.batteryLife = reader["batteryLife"] != DBNull.Value ? reader["batteryLife"].ToString() : null;
                        }
                    }
                }
                catch (Exception ex) { MessageBox.Show($"Database Error (Laptop.GetData): {ex.Message}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
            }
        }
        public override string ToString() { return $"Laptop: ID:{id}, Name:{name}, Brand:{brand}, Price:{price:C}, Sold:{soldCounter}"; }
        public static string Compare(Laptop a, Laptop b)
        {
            if (a == null || b == null) return "Cannot compare: one or both objects are null.";
            StringBuilder sb = new StringBuilder();
            sb.AppendLine($"Comparing Laptop: {(a.name ?? "N/A")} vs {(b.name ?? "N/A")}");
            if (!Equals(a.brand, b.brand)) sb.AppendLine($"Brand: {(a.brand ?? "N/A")} vs {(b.brand ?? "N/A")}");
            if (!Equals(a.model, b.model)) sb.AppendLine($"Model: {(a.model ?? "N/A")} vs {(b.model ?? "N/A")}");
            if (a.price != b.price) sb.AppendLine($"Price: {a.price:C} vs {b.price:C}");
            if (!Equals(a.operatingSystem, b.operatingSystem)) sb.AppendLine($"OS: {(a.operatingSystem ?? "N/A")} vs {(b.operatingSystem ?? "N/A")}");
            if (a.storageCapacity != b.storageCapacity) sb.AppendLine($"Storage: {a.storageCapacity}GB vs {b.storageCapacity}GB");
            if (a.ramSize != b.ramSize) sb.AppendLine($"RAM: {a.ramSize}GB vs {b.ramSize}GB");
            if (!Equals(a.graphicsCard, b.graphicsCard)) sb.AppendLine($"Graphics: {(a.graphicsCard ?? "N/A")} vs {(b.graphicsCard ?? "N/A")}");
            if (!Equals(a.cpuType, b.cpuType)) sb.AppendLine($"CPU: {(a.cpuType ?? "N/A")} vs {(b.cpuType ?? "N/A")}");
            if (a.screenSize != b.screenSize) sb.AppendLine($"Screen Size: {a.screenSize}\" vs {b.screenSize}\"");
            if (!Equals(a.batteryLife, b.batteryLife)) sb.AppendLine($"Battery Life: {(a.batteryLife ?? "N/A")} vs {(b.batteryLife ?? "N/A")}");
            if (a.soldCounter != b.soldCounter) sb.AppendLine($"Sold Counter: {a.soldCounter} vs {b.soldCounter}");
            string result = sb.ToString();
            if (result.TrimEnd() == $"Comparing Laptop: {(a.name ?? "N/A")} vs {(b.name ?? "N/A")}") return $"Laptop {(a.name ?? "N/A")} and {(b.name ?? "N/A")} have no differences in compared properties.";
            return result.TrimEnd();
        }
    }

    public class GamingLaptop : Laptop
    {
        public string coolingSystem { get; set; }
        public string keyboardType { get; set; }
        public int frameRate { get; set; }

        public GamingLaptop(string name, string brand, string model, string color, float price, string description, int quantity, byte[] image, string qrCode, int soldCounter, string operatingSystem, int storageCapacity, int ramSize, string graphicsCard, string cpuType, float screenSize, string batteryLife, string coolingSystem, string keyboardType, int frameRate)
            : base(name, brand, model, color, price, description, quantity, image, qrCode, soldCounter, operatingSystem, storageCapacity, ramSize, graphicsCard, cpuType, screenSize, batteryLife)
        { this.coolingSystem = coolingSystem; this.keyboardType = keyboardType; this.frameRate = frameRate; }
        public GamingLaptop(string name, string brand, string model, string color, float price, int id, string description, int quantity, byte[] image, string qrCode, int soldCounter, string operatingSystem, int storageCapacity, int ramSize, string graphicsCard, string cpuType, float screenSize, string batteryLife, string coolingSystem, string keyboardType, int frameRate)
            : base(name, brand, model, color, price, id, description, quantity, image, qrCode, soldCounter, operatingSystem, storageCapacity, ramSize, graphicsCard, cpuType, screenSize, batteryLife)
        { this.coolingSystem = coolingSystem; this.keyboardType = keyboardType; this.frameRate = frameRate; }
        public GamingLaptop() : base() { }

        public override void SaveToDb(string connectionString)
        {
            string mergeQuery = @"
            MERGE INTO GammingLaptops AS Target USING (SELECT @name AS name) AS Source ON Target.name = Source.name
            WHEN MATCHED THEN UPDATE SET brand=@brand, model=@model, color=@color, price=@price, description=@description, quantity=@quantity, image=@image, QRCode=@QRCode, operatingSystem=@operatingSystem, storageCapacity=@storageCapacity, ramSize=@ramSize, graphicsCard=@graphicsCard, cpuType=@cpuType, screenSize=@screenSize, batteryLife=@batteryLife, soldCounter=@soldCounter, coolingSystem=@coolingSystem, keyboardType=@keyboardType, frameRate=@frameRate
            WHEN NOT MATCHED THEN INSERT (name, brand, model, color, price, description, quantity, image, QRCode, operatingSystem, storageCapacity, ramSize, graphicsCard, cpuType, screenSize, batteryLife, soldCounter, coolingSystem, keyboardType, frameRate)
                                  VALUES (@name, @brand, @model, @color, @price, @description, @quantity, @image, @QRCode, @operatingSystem, @storageCapacity, @ramSize, @graphicsCard, @cpuType, @screenSize, @batteryLife, @soldCounter, @coolingSystem, @keyboardType, @frameRate);";
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(mergeQuery, conn))
            {
                cmd.Parameters.AddWithValue("@name", (object)name ?? DBNull.Value); cmd.Parameters.AddWithValue("@brand", (object)brand ?? DBNull.Value); cmd.Parameters.AddWithValue("@model", (object)model ?? DBNull.Value); cmd.Parameters.AddWithValue("@color", (object)color ?? DBNull.Value); cmd.Parameters.AddWithValue("@price", price); cmd.Parameters.AddWithValue("@description", (object)description ?? DBNull.Value); cmd.Parameters.AddWithValue("@quantity", quantity); cmd.Parameters.AddWithValue("@image", (object)image ?? DBNull.Value); cmd.Parameters.AddWithValue("@QRCode", (object)QRCode ?? DBNull.Value); cmd.Parameters.AddWithValue("@soldCounter", soldCounter); cmd.Parameters.AddWithValue("@operatingSystem", (object)operatingSystem ?? DBNull.Value); cmd.Parameters.AddWithValue("@storageCapacity", storageCapacity); cmd.Parameters.AddWithValue("@ramSize", ramSize); cmd.Parameters.AddWithValue("@graphicsCard", (object)graphicsCard ?? DBNull.Value); cmd.Parameters.AddWithValue("@cpuType", (object)cpuType ?? DBNull.Value); cmd.Parameters.AddWithValue("@screenSize", screenSize); cmd.Parameters.AddWithValue("@batteryLife", (object)batteryLife ?? DBNull.Value); cmd.Parameters.AddWithValue("@coolingSystem", (object)coolingSystem ?? DBNull.Value); cmd.Parameters.AddWithValue("@keyboardType", (object)keyboardType ?? DBNull.Value); cmd.Parameters.AddWithValue("@frameRate", frameRate);
                try { conn.Open(); cmd.ExecuteNonQuery(); MessageBox.Show($"{this.GetType().Name} '{this.name}' saved successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                catch (Exception ex) { MessageBox.Show($"Database Error (GamingLaptop.SaveToDb): {ex.Message} \nQuery: {cmd.CommandText}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
            }
        }
        public override void SaveToDbWithoutImage(string connectionString)
        {
            string mergeQueryNoImage = @"
            MERGE INTO GammingLaptops AS Target USING (SELECT @name AS name) AS Source ON Target.name = Source.name
            WHEN MATCHED THEN UPDATE SET brand=@brand, model=@model, color=@color, price=@price, description=@description, quantity=@quantity, QRCode=@QRCode, operatingSystem=@operatingSystem, storageCapacity=@storageCapacity, ramSize=@ramSize, graphicsCard=@graphicsCard, cpuType=@cpuType, screenSize=@screenSize, batteryLife=@batteryLife, soldCounter=@soldCounter, coolingSystem=@coolingSystem, keyboardType=@keyboardType, frameRate=@frameRate
            WHEN NOT MATCHED THEN INSERT (name, brand, model, color, price, description, quantity, QRCode, operatingSystem, storageCapacity, ramSize, graphicsCard, cpuType, screenSize, batteryLife, soldCounter, coolingSystem, keyboardType, frameRate)
                                  VALUES (@name, @brand, @model, @color, @price, @description, @quantity, @QRCode, @operatingSystem, @storageCapacity, @ramSize, @graphicsCard, @cpuType, @screenSize, @batteryLife, @soldCounter, @coolingSystem, @keyboardType, @frameRate);";
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(mergeQueryNoImage, conn))
            {
                cmd.Parameters.AddWithValue("@name", (object)name ?? DBNull.Value); cmd.Parameters.AddWithValue("@brand", (object)brand ?? DBNull.Value); cmd.Parameters.AddWithValue("@model", (object)model ?? DBNull.Value); cmd.Parameters.AddWithValue("@color", (object)color ?? DBNull.Value); cmd.Parameters.AddWithValue("@price", price); cmd.Parameters.AddWithValue("@description", (object)description ?? DBNull.Value); cmd.Parameters.AddWithValue("@quantity", quantity); cmd.Parameters.AddWithValue("@QRCode", (object)QRCode ?? DBNull.Value); cmd.Parameters.AddWithValue("@soldCounter", soldCounter); cmd.Parameters.AddWithValue("@operatingSystem", (object)operatingSystem ?? DBNull.Value); cmd.Parameters.AddWithValue("@storageCapacity", storageCapacity); cmd.Parameters.AddWithValue("@ramSize", ramSize); cmd.Parameters.AddWithValue("@graphicsCard", (object)graphicsCard ?? DBNull.Value); cmd.Parameters.AddWithValue("@cpuType", (object)cpuType ?? DBNull.Value); cmd.Parameters.AddWithValue("@screenSize", screenSize); cmd.Parameters.AddWithValue("@batteryLife", (object)batteryLife ?? DBNull.Value); cmd.Parameters.AddWithValue("@coolingSystem", (object)coolingSystem ?? DBNull.Value); cmd.Parameters.AddWithValue("@keyboardType", (object)keyboardType ?? DBNull.Value); cmd.Parameters.AddWithValue("@frameRate", frameRate);
                try { conn.Open(); cmd.ExecuteNonQuery(); MessageBox.Show($"{this.GetType().Name} '{this.name}' (no image) saved successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                catch (Exception ex) { MessageBox.Show($"Database Error (GamingLaptop.SaveToDbWithoutImage): {ex.Message} \nQuery: {cmd.CommandText}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
            }
        }
        public override void GetData(string in_name, string connectionString)
        {
            string selectQuery = "SELECT * FROM GammingLaptops WHERE name = @name";
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(selectQuery, conn))
            {
                cmd.Parameters.AddWithValue("@name", in_name);
                try
                {
                    conn.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            this.SetObjectId(Convert.ToInt32(reader["id"]));
                            this.name = reader["name"].ToString(); this.brand = reader["brand"].ToString(); this.model = reader["model"].ToString(); this.color = reader["color"].ToString(); this.price = Convert.ToSingle(reader["price"]); this.description = reader["description"] != DBNull.Value ? reader["description"].ToString() : null; this.quantity = Convert.ToInt32(reader["quantity"]); this.image = reader["image"] != DBNull.Value ? (byte[])reader["image"] : null; this.QRCode = reader["QRCode"].ToString(); this.soldCounter = reader["soldCounter"] != DBNull.Value ? Convert.ToInt32(reader["soldCounter"]) : 0; this.operatingSystem = reader["operatingSystem"] != DBNull.Value ? reader["operatingSystem"].ToString() : null; this.storageCapacity = Convert.ToInt32(reader["storageCapacity"]); this.ramSize = Convert.ToInt32(reader["ramSize"]); this.graphicsCard = reader["graphicsCard"] != DBNull.Value ? reader["graphicsCard"].ToString() : null; this.cpuType = reader["cpuType"] != DBNull.Value ? reader["cpuType"].ToString() : null; this.screenSize = Convert.ToSingle(reader["screenSize"]); this.batteryLife = reader["batteryLife"] != DBNull.Value ? reader["batteryLife"].ToString() : null; this.coolingSystem = reader["coolingSystem"] != DBNull.Value ? reader["coolingSystem"].ToString() : null; this.keyboardType = reader["keyboardType"] != DBNull.Value ? reader["keyboardType"].ToString() : null; this.frameRate = Convert.ToInt32(reader["frameRate"]);
                        }
                    }
                }
                catch (Exception ex) { MessageBox.Show($"Database Error (GammingLaptop.GetData): {ex.Message}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
            }
        }
        public override string ToString() { return $"{base.ToString()}, Cooling: {coolingSystem}, FPS: {frameRate}"; }
        public static string Compare(GamingLaptop a, GamingLaptop b)
        {
            if (a == null || b == null) return "Cannot compare: one or both objects are null.";
            string laptopComparison = Laptop.Compare(a, b); StringBuilder sb = new StringBuilder();
            bool laptopDifferencesFound = !laptopComparison.Contains("have no differences in compared properties");
            if (laptopDifferencesFound) { sb.Append(laptopComparison); if (!laptopComparison.EndsWith(Environment.NewLine)) sb.AppendLine(); }
            else { sb.AppendLine($"Comparing Gaming Laptop: {(a.name ?? "N/A")} vs {(b.name ?? "N/A")}"); }
            bool gamingDifferences = false;
            if (!Equals(a.coolingSystem, b.coolingSystem)) { sb.AppendLine($"Cooling: {(a.coolingSystem ?? "N/A")} vs {(b.coolingSystem ?? "N/A")}"); gamingDifferences = true; }
            if (!Equals(a.keyboardType, b.keyboardType)) { sb.AppendLine($"Keyboard: {(a.keyboardType ?? "N/A")} vs {(b.keyboardType ?? "N/A")}"); gamingDifferences = true; }
            if (a.frameRate != b.frameRate) { sb.AppendLine($"FPS: {a.frameRate} vs {b.frameRate}"); gamingDifferences = true; }
            if (!laptopDifferencesFound && !gamingDifferences) return $"Gaming Laptop {(a.name ?? "N/A")} and {(b.name ?? "N/A")} have no differences in compared properties.";
            if (laptopDifferencesFound && !gamingDifferences && sb.ToString().TrimEnd() == laptopComparison.TrimEnd()) return laptopComparison;
            return sb.ToString().TrimEnd();
        }
    }

    public class TwoInOne : Laptop
    {
        public bool detachableKeyboard { get; set; }
        public string hingeType { get; set; }

        public TwoInOne(string name, string brand, string model, string color, float price, string description, int quantity, byte[] image, string qrCode, int soldCounter, string operatingSystem, int storageCapacity, int ramSize, string graphicsCard, string cpuType, float screenSize, string batteryLife, bool detachableKeyboard, string hingeType)
            : base(name, brand, model, color, price, description, quantity, image, qrCode, soldCounter, operatingSystem, storageCapacity, ramSize, graphicsCard, cpuType, screenSize, batteryLife)
        { this.detachableKeyboard = detachableKeyboard; this.hingeType = hingeType; }
        public TwoInOne(string name, string brand, string model, string color, float price, int id, string description, int quantity, byte[] image, string qrCode, int soldCounter, string operatingSystem, int storageCapacity, int ramSize, string graphicsCard, string cpuType, float screenSize, string batteryLife, bool detachableKeyboard, string hingeType)
            : base(name, brand, model, color, price, id, description, quantity, image, qrCode, soldCounter, operatingSystem, storageCapacity, ramSize, graphicsCard, cpuType, screenSize, batteryLife)
        { this.detachableKeyboard = detachableKeyboard; this.hingeType = hingeType; }
        public TwoInOne() : base() { }

        public override void SaveToDb(string connectionString)
        {
            string mergeQuery = @"
            MERGE INTO TwoInOnes AS Target USING (SELECT @name AS name) AS Source ON Target.name = Source.name
            WHEN MATCHED THEN UPDATE SET brand=@brand, model=@model, color=@color, price=@price, description=@description, quantity=@quantity, image=@image, QRCode=@QRCode, operatingSystem=@operatingSystem, storageCapacity=@storageCapacity, ramSize=@ramSize, graphicsCard=@graphicsCard, cpuType=@cpuType, screenSize=@screenSize, batteryLife=@batteryLife, soldCounter=@soldCounter, detachableKeyboard=@detachableKeyboard, hingeType=@hingeType
            WHEN NOT MATCHED THEN INSERT (name, brand, model, color, price, description, quantity, image, QRCode, operatingSystem, storageCapacity, ramSize, graphicsCard, cpuType, screenSize, batteryLife, soldCounter, detachableKeyboard, hingeType)
                                  VALUES (@name, @brand, @model, @color, @price, @description, @quantity, @image, @QRCode, @operatingSystem, @storageCapacity, @ramSize, @graphicsCard, @cpuType, @screenSize, @batteryLife, @soldCounter, @detachableKeyboard, @hingeType);";
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(mergeQuery, conn))
            {
                cmd.Parameters.AddWithValue("@name", (object)name ?? DBNull.Value); cmd.Parameters.AddWithValue("@brand", (object)brand ?? DBNull.Value); cmd.Parameters.AddWithValue("@model", (object)model ?? DBNull.Value); cmd.Parameters.AddWithValue("@color", (object)color ?? DBNull.Value); cmd.Parameters.AddWithValue("@price", price); cmd.Parameters.AddWithValue("@description", (object)description ?? DBNull.Value); cmd.Parameters.AddWithValue("@quantity", quantity); cmd.Parameters.AddWithValue("@image", (object)image ?? DBNull.Value); cmd.Parameters.AddWithValue("@QRCode", (object)QRCode ?? DBNull.Value); cmd.Parameters.AddWithValue("@soldCounter", soldCounter); cmd.Parameters.AddWithValue("@operatingSystem", (object)operatingSystem ?? DBNull.Value); cmd.Parameters.AddWithValue("@storageCapacity", storageCapacity); cmd.Parameters.AddWithValue("@ramSize", ramSize); cmd.Parameters.AddWithValue("@graphicsCard", (object)graphicsCard ?? DBNull.Value); cmd.Parameters.AddWithValue("@cpuType", (object)cpuType ?? DBNull.Value); cmd.Parameters.AddWithValue("@screenSize", screenSize); cmd.Parameters.AddWithValue("@batteryLife", (object)batteryLife ?? DBNull.Value); cmd.Parameters.AddWithValue("@detachableKeyboard", detachableKeyboard); cmd.Parameters.AddWithValue("@hingeType", (object)hingeType ?? DBNull.Value);
                try { conn.Open(); cmd.ExecuteNonQuery(); MessageBox.Show($"{this.GetType().Name} '{this.name}' saved successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                catch (Exception ex) { MessageBox.Show($"Database Error (TwoInOne.SaveToDb): {ex.Message} \nQuery: {cmd.CommandText}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
            }
        }
        public override void SaveToDbWithoutImage(string connectionString)
        {
            string mergeQueryNoImage = @"
            MERGE INTO TwoInOnes AS Target USING (SELECT @name AS name) AS Source ON Target.name = Source.name
            WHEN MATCHED THEN UPDATE SET brand=@brand, model=@model, color=@color, price=@price, description=@description, quantity=@quantity, QRCode=@QRCode, operatingSystem=@operatingSystem, storageCapacity=@storageCapacity, ramSize=@ramSize, graphicsCard=@graphicsCard, cpuType=@cpuType, screenSize=@screenSize, batteryLife=@batteryLife, soldCounter=@soldCounter, detachableKeyboard=@detachableKeyboard, hingeType=@hingeType
            WHEN NOT MATCHED THEN INSERT (name, brand, model, color, price, description, quantity, QRCode, operatingSystem, storageCapacity, ramSize, graphicsCard, cpuType, screenSize, batteryLife, soldCounter, detachableKeyboard, hingeType)
                                  VALUES (@name, @brand, @model, @color, @price, @description, @quantity, @QRCode, @operatingSystem, @storageCapacity, @ramSize, @graphicsCard, @cpuType, @screenSize, @batteryLife, @soldCounter, @detachableKeyboard, @hingeType);";
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(mergeQueryNoImage, conn))
            {
                cmd.Parameters.AddWithValue("@name", (object)name ?? DBNull.Value); cmd.Parameters.AddWithValue("@brand", (object)brand ?? DBNull.Value); cmd.Parameters.AddWithValue("@model", (object)model ?? DBNull.Value); cmd.Parameters.AddWithValue("@color", (object)color ?? DBNull.Value); cmd.Parameters.AddWithValue("@price", price); cmd.Parameters.AddWithValue("@description", (object)description ?? DBNull.Value); cmd.Parameters.AddWithValue("@quantity", quantity); cmd.Parameters.AddWithValue("@QRCode", (object)QRCode ?? DBNull.Value); cmd.Parameters.AddWithValue("@soldCounter", soldCounter); cmd.Parameters.AddWithValue("@operatingSystem", (object)operatingSystem ?? DBNull.Value); cmd.Parameters.AddWithValue("@storageCapacity", storageCapacity); cmd.Parameters.AddWithValue("@ramSize", ramSize); cmd.Parameters.AddWithValue("@graphicsCard", (object)graphicsCard ?? DBNull.Value); cmd.Parameters.AddWithValue("@cpuType", (object)cpuType ?? DBNull.Value); cmd.Parameters.AddWithValue("@screenSize", screenSize); cmd.Parameters.AddWithValue("@batteryLife", (object)batteryLife ?? DBNull.Value); cmd.Parameters.AddWithValue("@detachableKeyboard", detachableKeyboard); cmd.Parameters.AddWithValue("@hingeType", (object)hingeType ?? DBNull.Value);
                try { conn.Open(); cmd.ExecuteNonQuery(); MessageBox.Show($"{this.GetType().Name} '{this.name}' (no image) saved successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                catch (Exception ex) { MessageBox.Show($"Database Error (TwoInOne.SaveToDbWithoutImage): {ex.Message} \nQuery: {cmd.CommandText}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
            }
        }
        public override void GetData(string in_name, string connectionString)
        {
            string selectQuery = "SELECT * FROM TwoInOnes WHERE name = @name";
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(selectQuery, conn))
            {
                cmd.Parameters.AddWithValue("@name", in_name);
                try
                {
                    conn.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            this.SetObjectId(Convert.ToInt32(reader["id"]));
                            this.name = reader["name"].ToString(); this.brand = reader["brand"].ToString(); this.model = reader["model"].ToString(); this.color = reader["color"].ToString(); this.price = Convert.ToSingle(reader["price"]); this.description = reader["description"] != DBNull.Value ? reader["description"].ToString() : null; this.quantity = Convert.ToInt32(reader["quantity"]); this.image = reader["image"] != DBNull.Value ? (byte[])reader["image"] : null; this.QRCode = reader["QRCode"].ToString(); this.soldCounter = reader["soldCounter"] != DBNull.Value ? Convert.ToInt32(reader["soldCounter"]) : 0; this.operatingSystem = reader["operatingSystem"] != DBNull.Value ? reader["operatingSystem"].ToString() : null; this.storageCapacity = Convert.ToInt32(reader["storageCapacity"]); this.ramSize = Convert.ToInt32(reader["ramSize"]); this.graphicsCard = reader["graphicsCard"] != DBNull.Value ? reader["graphicsCard"].ToString() : null; this.cpuType = reader["cpuType"] != DBNull.Value ? reader["cpuType"].ToString() : null; this.screenSize = Convert.ToSingle(reader["screenSize"]); this.batteryLife = reader["batteryLife"] != DBNull.Value ? reader["batteryLife"].ToString() : null; this.detachableKeyboard = Convert.ToBoolean(reader["detachableKeyboard"]); this.hingeType = reader["hingeType"] != DBNull.Value ? reader["hingeType"].ToString() : null;
                        }
                    }
                }
                catch (Exception ex) { MessageBox.Show($"Database Error (TwoInOne.GetData): {ex.Message}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
            }
        }
        public override string ToString() { return $"{base.ToString()}, Detachable: {detachableKeyboard}, Hinge: {hingeType}"; }
        public static string Compare(TwoInOne a, TwoInOne b)
        {
            if (a == null || b == null) return "Cannot compare: one or both objects are null.";
            string laptopComparison = Laptop.Compare(a, b); StringBuilder sb = new StringBuilder();
            bool laptopDifferencesFound = !laptopComparison.Contains("have no differences in compared properties");
            if (laptopDifferencesFound) { sb.Append(laptopComparison); if (!laptopComparison.EndsWith(Environment.NewLine)) sb.AppendLine(); }
            else { sb.AppendLine($"Comparing 2-in-1: {(a.name ?? "N/A")} vs {(b.name ?? "N/A")}"); }
            bool twoInOneDifferences = false;
            if (a.detachableKeyboard != b.detachableKeyboard) { sb.AppendLine($"Detachable Keyboard: {a.detachableKeyboard} vs {b.detachableKeyboard}"); twoInOneDifferences = true; }
            if (!Equals(a.hingeType, b.hingeType)) { sb.AppendLine($"Hinge Type: {(a.hingeType ?? "N/A")} vs {(b.hingeType ?? "N/A")}"); twoInOneDifferences = true; }
            if (!laptopDifferencesFound && !twoInOneDifferences) return $"2-in-1 {(a.name ?? "N/A")} and {(b.name ?? "N/A")} have no differences in compared properties.";
            if (laptopDifferencesFound && !twoInOneDifferences && sb.ToString().TrimEnd() == laptopComparison.TrimEnd()) return laptopComparison;
            return sb.ToString().TrimEnd();
        }
    }

    public class Cpu : Electronics
    {
        public int cores { get; set; }
        public float frequencyGHz { get; set; }
        public string socketType { get; set; }

        public Cpu(string name, string brand, string model, string color, float price, string description, int quantity, byte[] image, string qrCode, int soldCounter, int cores, float frequencyGHz, string socketType)
            : base(name, brand, model, color, price, description, quantity, image, qrCode, soldCounter)
        { this.cores = cores; this.frequencyGHz = frequencyGHz; this.socketType = socketType; }
        public Cpu(string name, string brand, string model, string color, float price, int id, string description, int quantity, byte[] image, string qrCode, int soldCounter, int cores, float frequencyGHz, string socketType)
            : base(name, brand, model, color, price, id, description, quantity, image, qrCode, soldCounter)
        { this.cores = cores; this.frequencyGHz = frequencyGHz; this.socketType = socketType; }
        public Cpu() : base() { }

        public override void SaveToDb(string connectionString)
        {
            string mergeQuery = @"
            MERGE INTO Cpus AS Target USING (SELECT @name AS name) AS Source ON Target.name = Source.name
            WHEN MATCHED THEN UPDATE SET brand=@brand, model=@model, color=@color, price=@price, description=@description, quantity=@quantity, image=@image, QRCode=@QRCode, soldCounter=@soldCounter, cores=@cores, frequencyGHz=@frequencyGHz, socketType=@socketType
            WHEN NOT MATCHED THEN INSERT (name, brand, model, color, price, description, quantity, image, QRCode, soldCounter, cores, frequencyGHz, socketType)
                                  VALUES (@name, @brand, @model, @color, @price, @description, @quantity, @image, @QRCode, @soldCounter, @cores, @frequencyGHz, @socketType);";
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(mergeQuery, conn))
            {
                cmd.Parameters.AddWithValue("@name", (object)name ?? DBNull.Value); cmd.Parameters.AddWithValue("@brand", (object)brand ?? DBNull.Value); cmd.Parameters.AddWithValue("@model", (object)model ?? DBNull.Value); cmd.Parameters.AddWithValue("@color", (object)color ?? DBNull.Value); cmd.Parameters.AddWithValue("@price", price); cmd.Parameters.AddWithValue("@description", (object)description ?? DBNull.Value); cmd.Parameters.AddWithValue("@quantity", quantity); cmd.Parameters.AddWithValue("@image", (object)image ?? DBNull.Value); cmd.Parameters.AddWithValue("@QRCode", (object)QRCode ?? DBNull.Value); cmd.Parameters.AddWithValue("@soldCounter", soldCounter); cmd.Parameters.AddWithValue("@cores", cores); cmd.Parameters.AddWithValue("@frequencyGHz", frequencyGHz); cmd.Parameters.AddWithValue("@socketType", (object)socketType ?? DBNull.Value);
                try { conn.Open(); cmd.ExecuteNonQuery(); MessageBox.Show($"{this.GetType().Name} '{this.name}' saved successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                catch (Exception ex) { MessageBox.Show($"Database Error (Cpu.SaveToDb): {ex.Message} \nQuery: {cmd.CommandText}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
            }
        }
        public override void SaveToDbWithoutImage(string connectionString)
        {
            string mergeQueryNoImage = @"
            MERGE INTO Cpus AS Target USING (SELECT @name AS name) AS Source ON Target.name = Source.name
            WHEN MATCHED THEN UPDATE SET brand=@brand, model=@model, color=@color, price=@price, description=@description, quantity=@quantity, QRCode=@QRCode, soldCounter=@soldCounter, cores=@cores, frequencyGHz=@frequencyGHz, socketType=@socketType
            WHEN NOT MATCHED THEN INSERT (name, brand, model, color, price, description, quantity, QRCode, soldCounter, cores, frequencyGHz, socketType)
                                  VALUES (@name, @brand, @model, @color, @price, @description, @quantity, @QRCode, @soldCounter, @cores, @frequencyGHz, @socketType);";
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(mergeQueryNoImage, conn))
            {
                cmd.Parameters.AddWithValue("@name", (object)name ?? DBNull.Value); cmd.Parameters.AddWithValue("@brand", (object)brand ?? DBNull.Value); cmd.Parameters.AddWithValue("@model", (object)model ?? DBNull.Value); cmd.Parameters.AddWithValue("@color", (object)color ?? DBNull.Value); cmd.Parameters.AddWithValue("@price", price); cmd.Parameters.AddWithValue("@description", (object)description ?? DBNull.Value); cmd.Parameters.AddWithValue("@quantity", quantity); cmd.Parameters.AddWithValue("@QRCode", (object)QRCode ?? DBNull.Value); cmd.Parameters.AddWithValue("@soldCounter", soldCounter); cmd.Parameters.AddWithValue("@cores", cores); cmd.Parameters.AddWithValue("@frequencyGHz", frequencyGHz); cmd.Parameters.AddWithValue("@socketType", (object)socketType ?? DBNull.Value);
                try { conn.Open(); cmd.ExecuteNonQuery(); MessageBox.Show($"{this.GetType().Name} '{this.name}' (no image) saved successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                catch (Exception ex) { MessageBox.Show($"Database Error (Cpu.SaveToDbWithoutImage): {ex.Message} \nQuery: {cmd.CommandText}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
            }
        }
        public override void GetData(string in_name, string connectionString)
        {
            string idColumnNameToUse = "id"; string specificIdColName = "cpu_id";
            string selectQuery = $"SELECT * FROM Cpus WHERE name = @name";
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(selectQuery, conn))
            {
                cmd.Parameters.AddWithValue("@name", in_name);
                try
                {
                    conn.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            bool specificIdColumnExists = false;
                            for (int i = 0; i < reader.FieldCount; i++) { if (reader.GetName(i).Equals(specificIdColName, StringComparison.OrdinalIgnoreCase)) { specificIdColumnExists = true; break; } }
                            idColumnNameToUse = specificIdColumnExists ? specificIdColName : "id";
                            this.SetObjectId(Convert.ToInt32(reader[idColumnNameToUse]));
                            this.name = reader["name"].ToString(); this.brand = reader["brand"].ToString(); this.model = reader["model"].ToString(); this.color = reader["color"].ToString(); this.price = Convert.ToSingle(reader["price"]); this.description = reader["description"] != DBNull.Value ? reader["description"].ToString() : null; this.quantity = Convert.ToInt32(reader["quantity"]); this.image = reader["image"] != DBNull.Value ? (byte[])reader["image"] : null; this.QRCode = reader["QRCode"].ToString(); this.soldCounter = reader["soldCounter"] != DBNull.Value ? Convert.ToInt32(reader["soldCounter"]) : 0; this.cores = Convert.ToInt32(reader["cores"]); this.frequencyGHz = Convert.ToSingle(reader["frequencyGHz"]); this.socketType = reader["socketType"] != DBNull.Value ? reader["socketType"].ToString() : null;
                        }
                    }
                }
                catch (Exception ex) { MessageBox.Show($"Database Error (Cpu.GetData): {ex.Message}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
            }
        }
        public override string ToString() { return $"CPU: ID:{id}, Name:{name}, Brand:{brand}, Cores:{cores}, Freq:{frequencyGHz}GHz, Price:{price:C}, Sold:{soldCounter}"; }
        public static string Compare(Cpu a, Cpu b)
        {
            if (a == null || b == null) return "Cannot compare: one or both objects are null.";
            StringBuilder sb = new StringBuilder();
            sb.AppendLine($"Comparing CPU: {(a.name ?? "N/A")} vs {(b.name ?? "N/A")}");
            if (!Equals(a.brand, b.brand)) sb.AppendLine($"Brand: {(a.brand ?? "N/A")} vs {(b.brand ?? "N/A")}");
            if (!Equals(a.model, b.model)) sb.AppendLine($"Model: {(a.model ?? "N/A")} vs {(b.model ?? "N/A")}");
            if (a.price != b.price) sb.AppendLine($"Price: {a.price:C} vs {b.price:C}");
            if (a.cores != b.cores) sb.AppendLine($"Cores: {a.cores} vs {b.cores}");
            if (a.frequencyGHz != b.frequencyGHz) sb.AppendLine($"Frequency: {a.frequencyGHz}GHz vs {b.frequencyGHz}GHz");
            if (!Equals(a.socketType, b.socketType)) sb.AppendLine($"Socket: {(a.socketType ?? "N/A")} vs {(b.socketType ?? "N/A")}");
            if (a.soldCounter != b.soldCounter) sb.AppendLine($"Sold Counter: {a.soldCounter} vs {b.soldCounter}");
            string result = sb.ToString();
            if (result.TrimEnd() == $"Comparing CPU: {(a.name ?? "N/A")} vs {(b.name ?? "N/A")}") return $"CPU {(a.name ?? "N/A")} and {(b.name ?? "N/A")} have no differences in compared properties.";
            return result.TrimEnd();
        }
    }

    public class Gpu : Electronics
    {
        public int memoryGB { get; set; }
        public string chipset { get; set; }

        public Gpu(string name, string brand, string model, string color, float price, string description, int quantity, byte[] image, string qrCode, int soldCounter, int memoryGB, string chipset)
            : base(name, brand, model, color, price, description, quantity, image, qrCode, soldCounter)
        { this.memoryGB = memoryGB; this.chipset = chipset; }
        public Gpu(string name, string brand, string model, string color, float price, int id, string description, int quantity, byte[] image, string qrCode, int soldCounter, int memoryGB, string chipset)
            : base(name, brand, model, color, price, id, description, quantity, image, qrCode, soldCounter)
        { this.memoryGB = memoryGB; this.chipset = chipset; }
        public Gpu() : base() { }

        public override void SaveToDb(string connectionString)
        {
            string mergeQuery = @"
            MERGE INTO Gpus AS Target USING (SELECT @name AS name) AS Source ON Target.name = Source.name
            WHEN MATCHED THEN UPDATE SET brand=@brand, model=@model, color=@color, price=@price, description=@description, quantity=@quantity, image=@image, QRCode=@QRCode, soldCounter=@soldCounter, memoryGB=@memoryGB, chipset=@chipset
            WHEN NOT MATCHED THEN INSERT (name, brand, model, color, price, description, quantity, image, QRCode, soldCounter, memoryGB, chipset)
                                  VALUES (@name, @brand, @model, @color, @price, @description, @quantity, @image, @QRCode, @soldCounter, @memoryGB, @chipset);";
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(mergeQuery, conn))
            {
                cmd.Parameters.AddWithValue("@name", (object)name ?? DBNull.Value); cmd.Parameters.AddWithValue("@brand", (object)brand ?? DBNull.Value); cmd.Parameters.AddWithValue("@model", (object)model ?? DBNull.Value); cmd.Parameters.AddWithValue("@color", (object)color ?? DBNull.Value); cmd.Parameters.AddWithValue("@price", price); cmd.Parameters.AddWithValue("@description", (object)description ?? DBNull.Value); cmd.Parameters.AddWithValue("@quantity", quantity); cmd.Parameters.AddWithValue("@image", (object)image ?? DBNull.Value); cmd.Parameters.AddWithValue("@QRCode", (object)QRCode ?? DBNull.Value); cmd.Parameters.AddWithValue("@soldCounter", soldCounter); cmd.Parameters.AddWithValue("@memoryGB", memoryGB); cmd.Parameters.AddWithValue("@chipset", (object)chipset ?? DBNull.Value);
                try { conn.Open(); cmd.ExecuteNonQuery(); MessageBox.Show($"{this.GetType().Name} '{this.name}' saved successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                catch (Exception ex) { MessageBox.Show($"Database Error (Gpu.SaveToDb): {ex.Message} \nQuery: {cmd.CommandText}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
            }
        }
        public override void SaveToDbWithoutImage(string connectionString)
        {
            string mergeQueryNoImage = @"
            MERGE INTO Gpus AS Target USING (SELECT @name AS name) AS Source ON Target.name = Source.name
            WHEN MATCHED THEN UPDATE SET brand=@brand, model=@model, color=@color, price=@price, description=@description, quantity=@quantity, QRCode=@QRCode, soldCounter=@soldCounter, memoryGB=@memoryGB, chipset=@chipset
            WHEN NOT MATCHED THEN INSERT (name, brand, model, color, price, description, quantity, QRCode, soldCounter, memoryGB, chipset)
                                  VALUES (@name, @brand, @model, @color, @price, @description, @quantity, @QRCode, @soldCounter, @memoryGB, @chipset);";
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(mergeQueryNoImage, conn))
            {
                cmd.Parameters.AddWithValue("@name", (object)name ?? DBNull.Value); cmd.Parameters.AddWithValue("@brand", (object)brand ?? DBNull.Value); cmd.Parameters.AddWithValue("@model", (object)model ?? DBNull.Value); cmd.Parameters.AddWithValue("@color", (object)color ?? DBNull.Value); cmd.Parameters.AddWithValue("@price", price); cmd.Parameters.AddWithValue("@description", (object)description ?? DBNull.Value); cmd.Parameters.AddWithValue("@quantity", quantity); cmd.Parameters.AddWithValue("@QRCode", (object)QRCode ?? DBNull.Value); cmd.Parameters.AddWithValue("@soldCounter", soldCounter); cmd.Parameters.AddWithValue("@memoryGB", memoryGB); cmd.Parameters.AddWithValue("@chipset", (object)chipset ?? DBNull.Value);
                try { conn.Open(); cmd.ExecuteNonQuery(); MessageBox.Show($"{this.GetType().Name} '{this.name}' (no image) saved successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                catch (Exception ex) { MessageBox.Show($"Database Error (Gpu.SaveToDbWithoutImage): {ex.Message} \nQuery: {cmd.CommandText}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
            }
        }
        public override void GetData(string in_name, string connectionString)
        {
            string selectQuery = "SELECT * FROM Gpus WHERE name = @name";
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(selectQuery, conn))
            {
                cmd.Parameters.AddWithValue("@name", in_name);
                try
                {
                    conn.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            this.SetObjectId(Convert.ToInt32(reader["id"]));
                            this.name = reader["name"].ToString(); this.brand = reader["brand"].ToString(); this.model = reader["model"].ToString(); this.color = reader["color"].ToString(); this.price = Convert.ToSingle(reader["price"]); this.description = reader["description"] != DBNull.Value ? reader["description"].ToString() : null; this.quantity = Convert.ToInt32(reader["quantity"]); this.image = reader["image"] != DBNull.Value ? (byte[])reader["image"] : null; this.QRCode = reader["QRCode"].ToString(); this.soldCounter = reader["soldCounter"] != DBNull.Value ? Convert.ToInt32(reader["soldCounter"]) : 0; this.memoryGB = Convert.ToInt32(reader["memoryGB"]); this.chipset = reader["chipset"] != DBNull.Value ? reader["chipset"].ToString() : null;
                        }
                    }
                }
                catch (Exception ex) { MessageBox.Show($"Database Error (Gpu.GetData): {ex.Message}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
            }
        }
        public override string ToString() { return $"GPU: ID:{id}, Name:{name}, Brand:{brand}, Memory:{memoryGB}GB, Chipset:{chipset}, Price:{price:C}, Sold:{soldCounter}"; }
        public static string Compare(Gpu a, Gpu b)
        {
            if (a == null || b == null) return "Cannot compare: one or both objects are null.";
            StringBuilder sb = new StringBuilder();
            sb.AppendLine($"Comparing GPU: {(a.name ?? "N/A")} vs {(b.name ?? "N/A")}");
            if (!Equals(a.brand, b.brand)) sb.AppendLine($"Brand: {(a.brand ?? "N/A")} vs {(b.brand ?? "N/A")}");
            if (!Equals(a.model, b.model)) sb.AppendLine($"Model: {(a.model ?? "N/A")} vs {(b.model ?? "N/A")}");
            if (a.price != b.price) sb.AppendLine($"Price: {a.price:C} vs {b.price:C}");
            if (a.memoryGB != b.memoryGB) sb.AppendLine($"Memory: {a.memoryGB}GB vs {b.memoryGB}GB");
            if (!Equals(a.chipset, b.chipset)) sb.AppendLine($"Chipset: {(a.chipset ?? "N/A")} vs {(b.chipset ?? "N/A")}");
            if (a.soldCounter != b.soldCounter) sb.AppendLine($"Sold Counter: {a.soldCounter} vs {b.soldCounter}");
            string result = sb.ToString();
            if (result.TrimEnd() == $"Comparing GPU: {(a.name ?? "N/A")} vs {(b.name ?? "N/A")}") return $"GPU {(a.name ?? "N/A")} and {(b.name ?? "N/A")} have no differences in compared properties.";
            return result.TrimEnd();
        }
    }
} // End of namespace Market